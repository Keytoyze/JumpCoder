[
    {
        "entry_point": "11",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_Occ(s,ch):\n\t\"\"\"\n\tWrite a python function to remove first and last occurrence of a given character from the string.\n\tassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
        "reference": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "12",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sort_matrix(M):\n\t\"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\t\"\"\"\n\n\n### Response:",
        "output": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
        "reference": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "13",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_common(words):\n\t\"\"\"\n\tWrite a function to count the most common words in a dictionary.\n\tassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import Counter\ndef count_common(words):\n  word_counts = Counter(words)\n  top_four = word_counts.most_common(4)\n  return (top_four)\n",
        "reference": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "14",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Volume(l,b,h) :\n\t\"\"\"\n\tWrite a python function to find the volume of a triangular prism.\n\tassert find_Volume(10,8,6) == 240\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
        "reference": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "15",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef split_lowerstring(text):\n\t\"\"\"\n\tWrite a function to split a string at lowercase letters.\n\tassert split_lowerstring(\"AbCd\")==['bC','d']\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef split_lowerstring(text):\n return (re.findall('[a-z][^a-z]*', text))",
        "reference": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "16",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef text_lowercase_underscore(text):\n\t\"\"\"\n\tWrite a function to find sequences of lowercase letters joined with an underscore.\n\tassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "reference": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "17",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef square_perimeter(a):\n\t\"\"\"\n\tWrite a function to find the perimeter of a square.\n\tassert square_perimeter(10)==40\n\t\"\"\"\n\n\n### Response:",
        "output": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "reference": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "18",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_dirty_chars(string, second_string):\n\t\"\"\"\n\tWrite a function to remove characters from the first string which are present in the second string.\n\tassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\t\"\"\"\n\n\n### Response:",
        "output": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    temp = [] \n    for x in string: \n        temp.append(x) \n    return temp \ndef lst_to_string(List): \n    return ''.join(List) \ndef get_char_count_array(string): \n    count = [0] * NO_OF_CHARS \n    for i in string: \n        count[ord(i)] += 1\n    return count \ndef remove_dirty_chars(string, second_string): \n    count = get_char_count_array(second_string) \n    ip_ind = 0\n    res_ind = 0\n    temp = '' \n    str_list = str_to_list(string) \n    while ip_ind != len(str_list): \n        temp = str_list[ip_ind] \n        if count[ord(temp)] == 0: \n            str_list[res_ind] = str_list[ip_ind] \n            res_ind += 1\n        ip_ind+=1\n    return lst_to_string(str_list[0:res_ind]) ",
        "reference": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "19",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef test_duplicate(arraynums):\n\t\"\"\"\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\tassert test_duplicate(([1,2,3,4,5]))==False\n\t\"\"\"\n\n\n### Response:",
        "output": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
        "reference": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "20",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_woodall(x):\n\t\"\"\"\n\tWrite a function to check if the given number is woodball or not.\n\tassert is_woodall(383) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_woodall(x): \n    if (x % 2 == 0): \n        return False\n    if (x == 1): \n        return True\n    x = x + 1 \n    p = 0\n    while (x % 2 == 0): \n        x = x/2\n        p = p + 1\n        if (p == x): \n            return True\n    return False",
        "reference": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "21",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef multiples_of_num(m,n):\n\t\"\"\"\n\tWrite a function to find m number of multiples of n.\n\tassert multiples_of_num(4,3)== [3,6,9,12]\n\t\"\"\"\n\n\n### Response:",
        "output": "def multiples_of_num(m,n): \n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)",
        "reference": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "22",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_first_duplicate(nums):\n\t\"\"\"\n\tWrite a function to find the first duplicate element in a given array of integers.\n\tassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate",
        "reference": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "23",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef maximum_Sum(list1):\n\t\"\"\"\n\tWrite a python function to find the maximum sum of elements of list in a list of lists.\n\tassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\t\"\"\"\n\n\n### Response:",
        "output": "def maximum_Sum(list1): \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi ",
        "reference": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "24",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef binary_to_decimal(binary):\n\t\"\"\"\n\tWrite a function to convert the given binary number to its decimal equivalent.\n\tassert binary_to_decimal(100) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def binary_to_decimal(binary): \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return (decimal)",
        "reference": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "25",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Product(arr,n):\n\t\"\"\"\n\tWrite a python function to find the product of non-repeated elements in a given array.\n\tassert find_Product([1,1,2,3],4) == 6\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Product(arr,n): \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod; ",
        "reference": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "26",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_k_elements(test_list, K):\n\t\"\"\"\n\tWrite a function to check if the given tuple list has all k elements.\n\tassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_k_elements(test_list, K):\n  res = True\n  for tup in test_list:\n    for ele in tup:\n      if ele != K:\n        res = False\n  return (res) ",
        "reference": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "27",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove(list):\n\t\"\"\"\n\tWrite a python function to remove all digits from a list of strings.\n\tassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\t\"\"\"\n\n\n### Response:",
        "output": "import re  \ndef remove(list): \n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list",
        "reference": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "28",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef binomial_Coeff(n,k):\n\t\"\"\"\n\tWrite a python function to find binomial co-efficient.\n\tassert binomial_Coeff(5,2) == 10\n\t\"\"\"\n\n\n### Response:",
        "output": "def binomial_Coeff(n,k): \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1 \n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "reference": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "29",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_Odd_Occurrence(arr,arr_size):\n\t\"\"\"\n\tWrite a python function to find the element occurring odd number of times.\n\tassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_Odd_Occurrence(arr,arr_size):   \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1",
        "reference": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "30",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Substring_With_Equal_Ends(s):\n\t\"\"\"\n\tWrite a python function to count all the substrings starting and ending with same characters.\n\tassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n): \n        for j in range(1,n-i+1):  \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ",
        "reference": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "31",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef func(nums, k):\n\t\"\"\"\n\tWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\tassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\t\"\"\"\n\n\n### Response:",
        "output": "def func(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result",
        "reference": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "32",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_Prime_Factors (n):\n\t\"\"\"\n\tWrite a python function to find the largest prime factor of a given number.\n\tassert max_Prime_Factors(15) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "import math \ndef max_Prime_Factors (n): \n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n    if n > 2: \n        maxPrime = n  \n    return int(maxPrime)",
        "reference": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "33",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef decimal_To_Binary(N):\n\t\"\"\"\n\tWrite a python function to convert a decimal number to binary number.\n\tassert decimal_To_Binary(10) == 1010\n\t\"\"\"\n\n\n### Response:",
        "output": "def decimal_To_Binary(N): \n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        c = pow(10,cnt)  \n        B_Number += rem*c  \n        N //= 2 \n        cnt += 1\n    return B_Number  ",
        "reference": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "34",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_missing(ar,N):\n\t\"\"\"\n\tWrite a python function to find the missing number in a sorted array.\n\tassert find_missing([1,2,3,5],4) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_missing(ar,N): \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1) ",
        "reference": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "35",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_rect_num(n):\n\t\"\"\"\n\tWrite a function to find the n-th rectangular number.\n\tassert find_rect_num(4) == 20\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_rect_num(n):\n  return n*(n + 1) ",
        "reference": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "36",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Nth_Digit(p,q,N) :\n\t\"\"\"\n\tWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\tassert find_Nth_Digit(1,2,1) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Nth_Digit(p,q,N) :  \n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        res = p // q;  \n        p %= q;  \n    return res;  ",
        "reference": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "37",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sort_mixed_list(mixed_list):\n\t\"\"\"\n\tWrite a function to sort a given mixed list of integers and strings.\n\tassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\t\"\"\"\n\n\n### Response:",
        "output": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part",
        "reference": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "38",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef div_even_odd(list1):\n\t\"\"\"\n\tWrite a function to find the division of first even and odd number of a given list.\n\tassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\t\"\"\"\n\n\n### Response:",
        "output": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd)",
        "reference": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "39",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef rearange_string(S):\n\t\"\"\"\n\tWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\tassert rearange_string(\"aab\")==('aba')\n\t\"\"\"\n\n\n### Response:",
        "output": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "reference": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "40",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef freq_element(nums):\n\t\"\"\"\n\tWrite a function to find frequency of the elements in a given list of lists using collections module.\n\tassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  return result",
        "reference": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "41",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef filter_evennumbers(nums):\n\t\"\"\"\n\tWrite a function to filter even numbers using lambda function.\n\tassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\t\"\"\"\n\n\n### Response:",
        "output": "def filter_evennumbers(nums):\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n return even_nums",
        "reference": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "42",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Sum(arr,n):\n\t\"\"\"\n\tWrite a python function to find the sum of repeated elements in a given array.\n\tassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Sum(arr,n): \n    return sum([x for x in arr if arr.count(x) > 1])",
        "reference": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "43",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef text_match(text):\n\t\"\"\"\n\tWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\tassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef text_match(text):\n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')",
        "reference": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "44",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef text_match_string(text):\n\t\"\"\"\n\tWrite a function that matches a word at the beginning of a string.\n\tassert text_match_string(\" python\")==('Not matched!')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef text_match_string(text):\n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'",
        "reference": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "45",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_gcd(l):\n\t\"\"\"\n\tWrite a function to find the gcd of the given array elements.\n\tassert get_gcd([2, 4, 6, 8, 16]) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_gcd(x, y): \n    while(y): \n        x, y = y, x % y \n    return x \ndef get_gcd(l):\n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd",
        "reference": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "46",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef test_distinct(data):\n\t\"\"\"\n\tWrite a python function to determine whether all the numbers are different from each other are not.\n\tassert test_distinct([1,5,7,9]) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False;",
        "reference": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "47",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef compute_Last_Digit(A,B):\n\t\"\"\"\n\tWrite a python function to find the last digit when factorial of a divides factorial of b.\n\tassert compute_Last_Digit(2,4) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def compute_Last_Digit(A,B): \n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n        return 0\n    else:   \n        for i in range(A + 1,B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10",
        "reference": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "48",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef odd_bit_set_number(n):\n\t\"\"\"\n\tWrite a python function to set all odd bits of a given number.\n\tassert odd_bit_set_number(10) == 15\n\t\"\"\"\n\n\n### Response:",
        "output": "def odd_bit_set_number(n):\n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)",
        "reference": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "49",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef specified_element(nums, N):\n\t\"\"\"\n\tWrite a function to extract every first or specified element from a given two-dimensional list.\n\tassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\t\"\"\"\n\n\n### Response:",
        "output": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n    ",
        "reference": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "50",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef min_length_list(input_list):\n\t\"\"\"\n\tWrite a function to find the list with minimum length using lambda function.\n\tassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\t\"\"\"\n\n\n### Response:",
        "output": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)",
        "reference": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "51",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_equilateral(x,y,z):\n\t\"\"\"\n\tWrite a function to print check if the triangle is equilateral or not.\n\tassert check_equilateral(6,8,12)==False \n\t\"\"\"\n\n\n### Response:",
        "output": "def check_equilateral(x,y,z):\n  if x == y == z:\n       return True\n  else:\n     return False",
        "reference": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "52",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef parallelogram_area(b,h):\n\t\"\"\"\n\tWrite a function to caluclate area of a parallelogram.\n\tassert parallelogram_area(10,20)==200\n\t\"\"\"\n\n\n### Response:",
        "output": "def parallelogram_area(b,h):\n  area=b*h\n  return area",
        "reference": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "53",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_Equality(str):\n\t\"\"\"\n\tWrite a python function to check whether the first and last characters of a given string are equal or not.\n\tassert check_Equality(\"abcda\") == \"Equal\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_Equality(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ",
        "reference": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "54",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef counting_sort(my_list):\n\t\"\"\"\n\tWrite a function to sort the given array by using counting sort.\n\tassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\t\"\"\"\n\n\n### Response:",
        "output": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n         for a in range(buckets[j]):\n             my_list[i] = j\n             i += 1\n    return my_list",
        "reference": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "55",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef tn_gp(a,n,r):\n\t\"\"\"\n\tWrite a function to find t-nth term of geometric series.\n\tassert tn_gp(1,5,2)==16\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  return tn",
        "reference": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "56",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check(n):\n\t\"\"\"\n\tWrite a python function to check if a given number is one less than twice its reverse.\n\tassert check(70) == False\n\t\"\"\"\n\n\n### Response:",
        "output": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
        "reference": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "57",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Max_Num(arr,n) :\n\t\"\"\"\n\tWrite a python function to find the largest number that can be formed with the given digits.\n\tassert find_Max_Num([1,2,3],3) == 321\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Max_Num(arr,n) : \n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
        "reference": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "58",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef opposite_Signs(x,y):\n\t\"\"\"\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\tassert opposite_Signs(1,-2) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
        "reference": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "59",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_octagonal(n):\n\t\"\"\"\n\tWrite a function to find the nth octagonal number.\n\tassert is_octagonal(5) == 65\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_octagonal(n): \n    return 3 * n * n - 2 * n ",
        "reference": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "60",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_len_sub( arr, n):\n\t\"\"\"\n\tWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\tassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_len_sub( arr, n): \n    mls=[] \n    max = 0\n    for i in range(n): \n        mls.append(1) \n    for i in range(n): \n        for j in range(i): \n            if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \n                mls[i] = mls[j] + 1\n    for i in range(n): \n        if (max < mls[i]): \n            max = mls[i] \n    return max",
        "reference": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "61",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Substrings(s,n):\n\t\"\"\"\n\tWrite a python function to count number of substrings with the sum of digits equal to their length.\n\tassert count_Substrings('112112',6) == 6\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import defaultdict\ndef count_Substrings(s,n):\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
        "reference": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "62",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef smallest_num(xs):\n\t\"\"\"\n\tWrite a python function to find smallest number in a list.\n\tassert smallest_num([10, 20, 1, 45, 99]) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def smallest_num(xs):\n  return min(xs)\n",
        "reference": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "63",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_difference(test_list):\n\t\"\"\"\n\tWrite a function to find the maximum difference between available pairs in the given tuple list.\n\tassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
        "reference": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "64",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef subject_marks(subjectmarks):\n\t\"\"\"\n\tWrite a function to sort a list of tuples using lambda.\n\tassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\t\"\"\"\n\n\n### Response:",
        "output": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
        "reference": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "65",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef recursive_list_sum(data_list):\n\t\"\"\"\n\tWrite a function of recursion list sum.\n\tassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\t\"\"\"\n\n\n### Response:",
        "output": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total",
        "reference": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "66",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef pos_count(list):\n\t\"\"\"\n\tWrite a python function to count positive numbers in a list.\n\tassert pos_count([1,-2,3,-4]) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
        "reference": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "67",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef bell_number(n):\n\t\"\"\"\n\tWrite a function to find the number of ways to partition a set of bell numbers.\n\tassert bell_number(2)==2\n\t\"\"\"\n\n\n### Response:",
        "output": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
        "reference": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "68",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_Monotonic(A):\n\t\"\"\"\n\tWrite a python function to check whether the given array is monotonic or not.\n\tassert is_Monotonic([6, 5, 4, 4]) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "reference": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "69",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_sublist(l, s):\n\t\"\"\"\n\tWrite a function to check whether a list contains the given sublist or not.\n\tassert is_sublist([2,4,3,5,7],[3,7])==False\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1                \n                if n == len(s):\n                    sub_set = True\n    return sub_set",
        "reference": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "70",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_equal(Input, k):\n\t\"\"\"\n\tWrite a function to find whether all the given tuples have equal length or not.\n\tassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_equal_tuple(Input, k):\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input, k):\n  if find_equal_tuple(Input, k) == 1:\n    return (\"All tuples have same length\")\n  else:\n    return (\"All tuples do not have same length\")",
        "reference": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "71",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef comb_sort(nums):\n\t\"\"\"\n\tWrite a function to sort a list of elements using comb sort.\n\tassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\t\"\"\"\n\n\n### Response:",
        "output": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
        "reference": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "72",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef dif_Square(n):\n\t\"\"\"\n\tWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\tassert dif_Square(5) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
        "reference": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "73",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef multiple_split(text):\n\t\"\"\"\n\tWrite a function to split the given string with multiple delimiters by using regex.\n\tassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef multiple_split(text):\n  return (re.split('; |, |\\*|\\n',text))",
        "reference": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "74",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_samepatterns(colors, patterns):\n\t\"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\tassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\t\"\"\"\n\n\n### Response:",
        "output": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
        "reference": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "75",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_tuples(test_list, K):\n\t\"\"\"\n\tWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\tassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return (str(res)) ",
        "reference": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "76",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Squares(m,n):\n\t\"\"\"\n\tWrite a python function to count the number of squares in a rectangle.\n\tassert count_Squares(4,3) == 20\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Squares(m,n):\n    if(n < m):\n        temp = m\n        m = n\n        n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "reference": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "77",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nNone\n\t\"\"\"\n\tWrite a python function to find the difference between sum of even and odd digits.\n\tassert is_Diff (12345) == False\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_Diff(n): \n    return (n % 11 == 0) ",
        "reference": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "78",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_With_Odd_SetBits(n):\n\t\"\"\"\n\tWrite a python function to find number of integers with odd number of set bits.\n\tassert count_With_Odd_SetBits(5) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_With_Odd_SetBits(n): \n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    ans = n / 2\n    if (count % 2 != 0): \n        ans += 1\n    return ans ",
        "reference": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "79",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef word_len(s):\n\t\"\"\"\n\tWrite a python function to check whether the length of the word is odd or not.\n\tassert word_len(\"Hadoop\") == False\n\t\"\"\"\n\n\n### Response:",
        "output": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
        "reference": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "80",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef tetrahedral_number(n):\n\t\"\"\"\n\tWrite a function to find the nth tetrahedral number.\n\tassert tetrahedral_number(5) == 35.0\n\t\"\"\"\n\n\n### Response:",
        "output": "def tetrahedral_number(n): \n    return (n * (n + 1) * (n + 2)) / 6",
        "reference": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "81",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef zip_tuples(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to zip the two given tuples.\n\tassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\t\"\"\"\n\n\n### Response:",
        "output": "def zip_tuples(test_tup1, test_tup2):\n  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res) ",
        "reference": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "82",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef volume_sphere(r):\n\t\"\"\"\n\tWrite a function to find the volume of a sphere.\n\tassert volume_sphere(10)==4188.790204786391\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
        "reference": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "83",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_Char(strr):\n\t\"\"\"\n\tWrite a python function to find the character made by adding all the characters of the given string.\n\tassert get_Char(\"abc\") == \"f\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
        "reference": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "84",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sequence(n):\n\t\"\"\"\n\tWrite a function to find the n-th number in newman conway sequence.\n\tassert sequence(10) == 6\n\t\"\"\"\n\n\n### Response:",
        "output": "def sequence(n): \n    if n == 1 or n == 2: \n        return 1\n    else: \n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "reference": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "85",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef surfacearea_sphere(r):\n\t\"\"\"\n\tWrite a function to find the surface area of a sphere.\n\tassert surfacearea_sphere(10)==1256.6370614359173\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
        "reference": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "86",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef centered_hexagonal_number(n):\n\t\"\"\"\n\tWrite a function to find nth centered hexagonal number.\n\tassert centered_hexagonal_number(10) == 271\n\t\"\"\"\n\n\n### Response:",
        "output": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
        "reference": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "87",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t\"\"\"\n\tWrite a function to merge three dictionaries into a single expression.\n\tassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\t\"\"\"\n\n\n### Response:",
        "output": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
        "reference": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "88",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef freq_count(list1):\n\t\"\"\"\n\tWrite a function to get the frequency of the elements in a list.\n\tassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\t\"\"\"\n\n\n### Response:",
        "output": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
        "reference": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "89",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef closest_num(N):\n\t\"\"\"\n\tWrite a function to find the closest smaller number than n.\n\tassert closest_num(11) == 10\n\t\"\"\"\n\n\n### Response:",
        "output": "def closest_num(N):\n  return (N - 1)",
        "reference": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "90",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef len_log(list1):\n\t\"\"\"\n\tWrite a python function to find the length of the longest word.\n\tassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\t\"\"\"\n\n\n### Response:",
        "output": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
        "reference": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "91",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_substring(str1, sub_str):\n\t\"\"\"\n\tWrite a function to check if a substring is present in a given list of string values.\n\tassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
        "reference": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "92",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_undulating(n):\n\t\"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\tassert is_undulating(\"1212121\") == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_undulating(n): \n    if (len(n) <= 2): \n        return False\n    for i in range(2, len(n)): \n        if (n[i - 2] != n[i]): \n            return False\n    return True",
        "reference": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "93",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef power(a,b):\n\t\"\"\"\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n\tassert power(3,4) == 81\n\t\"\"\"\n\n\n### Response:",
        "output": "def power(a,b):\n    if b==0:\n        return 1\n    elif a==0:\n        return 0\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)",
        "reference": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "94",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef index_minimum(test_list):\n\t\"\"\"\n\tWrite a function to extract the index minimum value record from the given tuples.\n\tassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\t\"\"\"\n\n\n### Response:",
        "output": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
        "reference": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "95",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef Find_Min_Length(lst):\n\t\"\"\"\n\tWrite a python function to find the minimum length of sublist.\n\tassert Find_Min_Length([[1],[1,2]]) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
        "reference": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "96",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef divisor(n):\n\t\"\"\"\n\tWrite a python function to find the number of divisors of a given integer.\n\tassert divisor(15) == 4 \n\t\"\"\"\n\n\n### Response:",
        "output": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
        "reference": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "97",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef frequency_lists(list1):\n\t\"\"\"\n\tWrite a function to find frequency count of list of lists.\n\tassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\t\"\"\"\n\n\n### Response:",
        "output": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
        "reference": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "98",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef multiply_num(numbers):\n\t\"\"\"\n\tWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\tassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\t\"\"\"\n\n\n### Response:",
        "output": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
        "reference": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "99",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef decimal_to_binary(n):\n\t\"\"\"\n\tWrite a function to convert the given decimal number to its binary equivalent.\n\tassert decimal_to_binary(8) == '1000'\n\t\"\"\"\n\n\n### Response:",
        "output": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
        "reference": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "100",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef next_smallest_palindrome(num):\n\t\"\"\"\n\tWrite a function to find the next smallest palindrome of a specified number.\n\tassert next_smallest_palindrome(99)==101\n\t\"\"\"\n\n\n### Response:",
        "output": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
        "reference": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "101",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef kth_element(arr, n, k):\n\t\"\"\"\n\tWrite a function to find the kth element in the given array.\n\tassert kth_element([12,3,5,7,19], 5, 2) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def kth_element(arr, n, k):\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "reference": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "102",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef snake_to_camel(word):\n\t\"\"\"\n\tWrite a function to convert snake case string to camel case string.\n\tassert snake_to_camel('python_program')=='PythonProgram'\n\t\"\"\"\n\n\n### Response:",
        "output": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "reference": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "103",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef eulerian_num(n, m):\n\t\"\"\"\n\tWrite a function to find eulerian number a(n, m).\n\tassert eulerian_num(3, 1) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def eulerian_num(n, m): \n    if (m >= n or n == 0): \n        return 0 \n    if (m == 0): \n        return 1 \n    return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "reference": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "104",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sort_sublists(input_list):\n\t\"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\tassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\t\"\"\"\n\n\n### Response:",
        "output": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\r",
        "reference": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "105",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count(lst):\n\t\"\"\"\n\tWrite a python function to count true booleans in the given list.\n\tassert count([True,False,True]) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def count(lst):   \n    return sum(lst) ",
        "reference": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "106",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef add_lists(test_list, test_tup):\n\t\"\"\"\n\tWrite a function to add the given list to the given tuples.\n\tassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\t\"\"\"\n\n\n### Response:",
        "output": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
        "reference": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "107",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Hexadecimal(L,R) :\n\t\"\"\"\n\tWrite a python function to count hexadecimal numbers for a given range.\n\tassert count_Hexadecimal(10,15) == 6\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Hexadecimal(L,R) :  \n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n            k = i;  \n            while (k != 0) :  \n                if (k % 16 >= 10) : \n                    count += 1;  \n                k = k // 16;  \n    return count;  ",
        "reference": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "108",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef merge_sorted_list(num1,num2,num3):\n\t\"\"\"\n\tWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\tassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\t\"\"\"\n\n\n### Response:",
        "output": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
        "reference": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "109",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef odd_Equivalent(s,n):\n\t\"\"\"\n\tWrite a python function to find the count of rotations of a binary string with odd value.\n\tassert odd_Equivalent(\"011001\",6) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
        "reference": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "110",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef extract_missing(test_list, strt_val, stop_val):\n\t\"\"\"\n\tWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\tassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\t\"\"\"\n\n\n### Response:",
        "output": "def extract_missing(test_list, strt_val, stop_val):\n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      strt_val = sub[1]\n    if strt_val < stop_val:\n      res.append((strt_val, stop_val))\n  return (res) ",
        "reference": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "111",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef common_in_nested_lists(nestedlist):\n\t\"\"\"\n\tWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\tassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\t\"\"\"\n\n\n### Response:",
        "output": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
        "reference": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "112",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef perimeter(diameter,height) :\n\t\"\"\"\n\tWrite a python function to find the perimeter of a cylinder.\n\tassert perimeter(2,4) == 12\n\t\"\"\"\n\n\n### Response:",
        "output": "def perimeter(diameter,height) : \n    return 2*(diameter+height)  ",
        "reference": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "113",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_integer(text):\n\t\"\"\"\n\tWrite a function to check if a string represents an integer or not.\n\tassert check_integer(\"python\")==False\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
        "reference": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "114",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef assign_freq(test_list):\n\t\"\"\"\n\tWrite a function to assign frequency to each tuple in the given tuple list.\n\tassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import Counter \ndef assign_freq(test_list):\n  res = [(*key, val) for key, val in Counter(test_list).items()]\n  return (str(res)) ",
        "reference": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "115",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef empty_dit(list1):\n\t\"\"\"\n\tWrite a function to check whether all dictionaries in a list are empty or not.\n\tassert empty_dit([{},{},{}])==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
        "reference": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "116",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef tuple_to_int(nums):\n\t\"\"\"\n\tWrite a function to convert a given tuple of positive integers into an integer.\n\tassert tuple_to_int((1,2,3))==123\n\t\"\"\"\n\n\n### Response:",
        "output": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
        "reference": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "117",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef list_to_float(test_list):\n\t\"\"\"\n\tWrite a function to convert all possible convertible elements in the list to float.\n\tassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\t\"\"\"\n\n\n### Response:",
        "output": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return (str(res)) ",
        "reference": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "118",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef string_to_list(string):\n\t\"\"\"\n\t[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\tassert string_to_list(\"python programming\")==['python','programming']\n\t\"\"\"\n\n\n### Response:",
        "output": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
        "reference": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "119",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef search(arr,n) :\n\t\"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\tassert search([1,1,2,2,3],5) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
        "reference": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "120",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_product_tuple(list1):\n\t\"\"\"\n\tWrite a function to find the maximum product from the pairs of tuples within a given list.\n\tassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
        "reference": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "121",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_triplet(A, n, sum, count):\n\t\"\"\"\n\tWrite a function to find the triplet with sum of the given array\n\tassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)",
        "reference": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "122",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef smartNumber(n):\n\t\"\"\"\n\tWrite a function to find n\u2019th smart number.\n\tassert smartNumber(1) == 30\n\t\"\"\"\n\n\n### Response:",
        "output": "MAX = 3000 \ndef smartNumber(n): \n    primes = [0] * MAX \n    result = [] \n    for i in range(2, MAX): \n        if (primes[i] == 0): \n            primes[i] = 1 \n            j = i * 2 \n            while (j < MAX): \n                primes[j] -= 1 \n                if ( (primes[j] + 3) == 0): \n                    result.append(j) \n                j = j + i \n    result.sort() \n    return result[n - 1] ",
        "reference": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "123",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef amicable_numbers_sum(limit):\n\t\"\"\"\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n\tassert amicable_numbers_sum(999)==504\n\t\"\"\"\n\n\n### Response:",
        "output": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)",
        "reference": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "124",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef angle_complex(a,b):\n\t\"\"\"\n\tWrite a function to get the angle of a complex number.\n\tassert angle_complex(0,1j)==1.5707963267948966 \n\t\"\"\"\n\n\n### Response:",
        "output": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle",
        "reference": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "125",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_length(string, n):\n\t\"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\tassert find_length(\"11000010001\", 11) == 6\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_length(string, n): \n    current_sum = 0\n    max_sum = 0\n    for i in range(n): \n        current_sum += (1 if string[i] == '0' else -1) \n        if current_sum < 0: \n            current_sum = 0\n        max_sum = max(current_sum, max_sum) \n    return max_sum if max_sum else 0",
        "reference": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "126",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum(a,b):\n\t\"\"\"\n\tWrite a python function to find the sum of common divisors of two given numbers.\n\tassert sum(10,15) == 6\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
        "reference": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "127",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef multiply_int(x, y):\n\t\"\"\"\n\tWrite a function to multiply two integers without using the * operator in python.\n\tassert multiply_int(10,20)==200\n\t\"\"\"\n\n\n### Response:",
        "output": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "reference": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "128",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef long_words(n, str):\n\t\"\"\"\n\tWrite a function to shortlist words that are longer than n from a given list of words.\n\tassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\t\"\"\"\n\n\n### Response:",
        "output": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len    ",
        "reference": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "129",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef magic_square_test(my_matrix):\n\t\"\"\"\n\tWrite a function to calculate magic square.\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True",
        "reference": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "130",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_occurrences(nums):\n\t\"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\tassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result",
        "reference": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "131",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef reverse_vowels(str1):\n\t\"\"\"\n\tWrite a python function to reverse only the vowels of a given string.\n\tassert reverse_vowels(\"Python\") == \"Python\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def reverse_vowels(str1):\n    vowels = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            vowels += char\n    result_string = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            result_string += vowels[-1]\n            vowels = vowels[:-1]\n        else:\n            result_string += char\n    return result_string",
        "reference": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "132",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef tup_string(tup1):\n\t\"\"\"\n\tWrite a function to convert tuple to a string.\n\tassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\t\"\"\"\n\n\n### Response:",
        "output": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
        "reference": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "133",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_negativenum(nums):\n\t\"\"\"\n\tWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\tassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
        "reference": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "134",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_last (arr,n,p):\n\t\"\"\"\n\tWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\tassert check_last([5,7,10],3,1) == \"ODD\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_last (arr,n,p): \n    _sum = 0\n    for i in range(n): \n        _sum = _sum + arr[i] \n    if p == 1: \n        if _sum % 2 == 0: \n            return \"ODD\"\n        else: \n            return \"EVEN\"\n    return \"EVEN\"\n      ",
        "reference": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "135",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef hexagonal_num(n):\n\t\"\"\"\n\tWrite a function to find the nth hexagonal number.\n\tassert hexagonal_num(10) == 190\n\t\"\"\"\n\n\n### Response:",
        "output": "def hexagonal_num(n): \n    return n*(2*n - 1) ",
        "reference": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "136",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef cal_electbill(units):\n\t\"\"\"\n\tWrite a function to calculate electricity bill.\n\tassert cal_electbill(75)==246.25\n\t\"\"\"\n\n\n### Response:",
        "output": "def cal_electbill(units):\n if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n elif(units <= 200):\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n    surcharge = 45\n else:\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n    surcharge = 75\n total = amount + surcharge\n return total",
        "reference": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "137",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef zero_count(nums):\n\t\"\"\"\n\tWrite a function to find the ration of zeroes in an array of integers.\n\tassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\t\"\"\"\n\n\n### Response:",
        "output": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "reference": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "138",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_Sum_Of_Powers_Of_Two(n):\n\t\"\"\"\n\tWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\tassert is_Sum_Of_Powers_Of_Two(10) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
        "reference": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "139",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef circle_circumference(r):\n\t\"\"\"\n\tWrite a function to find the circumference of a circle.\n\tassert circle_circumference(10)==62.830000000000005\n\t\"\"\"\n\n\n### Response:",
        "output": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter",
        "reference": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "140",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef extract_singly(test_list):\n\t\"\"\"\n\tWrite a function to extract elements that occur singly in the given tuple list.\n\tassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\t\"\"\"\n\n\n### Response:",
        "output": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ",
        "reference": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "141",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef pancake_sort(nums):\n\t\"\"\"\n\tWrite a function to sort a list of elements using pancake sort.\n\tassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\t\"\"\"\n\n\n### Response:",
        "output": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
        "reference": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "142",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_samepair(list1,list2,list3):\n\t\"\"\"\n\tWrite a function to count the same pair in three given lists.\n\tassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
        "reference": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "143",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_lists(Input):\n\t\"\"\"\n\tWrite a function to find number of lists present in the given tuple.\n\tassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_lists(Input): \n    if isinstance(Input, list): \n        return 1\n    else: \n        return len(Input) ",
        "reference": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "144",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_Pairs(arr,n):\n\t\"\"\"\n\tWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\tassert sum_Pairs([1,8,9,15,16],5) == 74\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n    return sum",
        "reference": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "145",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_Abs_Diff(arr,n):\n\t\"\"\"\n\tWrite a python function to find the maximum difference between any two elements in a given array.\n\tassert max_Abs_Diff((2,1,5,3),4) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_Abs_Diff(arr,n): \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
        "reference": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "146",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef ascii_value_string(str1):\n\t\"\"\"\n\tWrite a function to find the ascii value of total characters in a string.\n\tassert ascii_value_string(\"python\")==112\n\t\"\"\"\n\n\n### Response:",
        "output": "def ascii_value_string(str1):\n  for i in range(len(str1)):\n   return ord(str1[i])",
        "reference": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "147",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_path_sum(tri, m, n):\n\t\"\"\"\n\tWrite a function to find the maximum total path sum in the given triangle.\n\tassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_path_sum(tri, m, n): \n    for i in range(m-1, -1, -1): \n        for j in range(i+1): \n            if (tri[i+1][j] > tri[i+1][j+1]): \n                tri[i][j] += tri[i+1][j] \n            else: \n                tri[i][j] += tri[i+1][j+1] \n    return tri[0][0]",
        "reference": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "148",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_digits_twoparts(N) :\n\t\"\"\"\n\tWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\tassert sum_digits_twoparts(35)==17\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_digits_single(x) : \n    ans = 0\n    while x : \n        ans += x % 10\n        x //= 10  \n    return ans \ndef closest(x) : \n    ans = 0\n    while (ans * 10 + 9 <= x) : \n        ans = ans * 10 + 9  \n    return ans   \ndef sum_digits_twoparts(N) : \n    A = closest(N)  \n    return sum_digits_single(A) + sum_digits_single(N - A) ",
        "reference": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "149",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef longest_subseq_with_diff_one(arr, n):\n\t\"\"\"\n\tWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\tassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\t\"\"\"\n\n\n### Response:",
        "output": "def longest_subseq_with_diff_one(arr, n): \n    dp = [1 for i in range(n)] \n    for i in range(n): \n        for j in range(i): \n            if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n                dp[i] = max(dp[i], dp[j]+1) \n    result = 1\n    for i in range(n): \n        if (result < dp[i]): \n            result = dp[i] \n    return result",
        "reference": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "150",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef does_Contain_B(a,b,c):\n\t\"\"\"\n\tWrite a python function to find whether the given number is present in the infinite sequence or not.\n\tassert does_Contain_B(1,7,3) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def does_Contain_B(a,b,c): \n    if (a == b): \n        return True\n    if ((b - a) * c > 0 and (b - a) % c == 0): \n        return True\n    return False",
        "reference": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "151",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_coprime(x,y):\n\t\"\"\"\n\tWrite a python function to check whether the given number is co-prime or not.\n\tassert is_coprime(17,13) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n    return p\ndef is_coprime(x,y):\n    return gcd(x,y) == 1",
        "reference": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "152",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef merge_sort(x):\n\t\"\"\"\n\tWrite a function to sort the given array by using merge sort.\n\tassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\t\"\"\"\n\n\n### Response:",
        "output": "def merge(a,b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)\n",
        "reference": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "153",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef parabola_vertex(a, b, c):\n\t\"\"\"\n\tWrite a function to find the vertex of a parabola.\n\tassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\t\"\"\"\n\n\n### Response:",
        "output": "def parabola_vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex",
        "reference": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "154",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef specified_element(nums, N):\n\t\"\"\"\n\tWrite a function to extract every specified element from a given two dimensional list.\n\tassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\t\"\"\"\n\n\n### Response:",
        "output": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result",
        "reference": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "155",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef even_bit_toggle_number(n) :\n\t\"\"\"\n\tWrite a python function to toggle all even bits of a given number.\n\tassert even_bit_toggle_number(10) == 0\n\t\"\"\"\n\n\n### Response:",
        "output": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n \n    while (temp > 0) :     \n        if (count % 2 == 1) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ",
        "reference": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "156",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef tuple_int_str(tuple_str):\n\t\"\"\"\n\tWrite a function to convert a tuple of string values to a tuple of integer values.\n\tassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\t\"\"\"\n\n\n### Response:",
        "output": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result",
        "reference": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "157",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef encode_list(list1):\n\t\"\"\"\n\tWrite a function to reflect the run-length encoding from a list.\n\tassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\t\"\"\"\n\n\n### Response:",
        "output": "from itertools import groupby\ndef encode_list(list1):\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "reference": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "158",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef min_Ops(arr,n,k):\n\t\"\"\"\n\tWrite a python function to find k number of operations required to make all elements equal.\n\tassert min_Ops([2,2,2,2],4,3) == 0\n\t\"\"\"\n\n\n### Response:",
        "output": "def min_Ops(arr,n,k): \n    max1 = max(arr) \n    res = 0\n    for i in range(0,n):  \n        if ((max1 - arr[i]) % k != 0): \n            return -1 \n        else: \n            res += (max1 - arr[i]) / k \n    return int(res) ",
        "reference": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "159",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef month_season(month,days):\n\t\"\"\"\n\tWrite a function to print the season for the given month and day.\n\tassert month_season('January',4)==('winter')\n\t\"\"\"\n\n\n### Response:",
        "output": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n     season = 'winter'\n elif month in ('April', 'May', 'June'):\n     season = 'spring'\n elif month in ('July', 'August', 'September'):\n     season = 'summer'\n else:\n     season = 'autumn'\n if (month == 'March') and (days > 19):\n     season = 'spring'\n elif (month == 'June') and (days > 20):\n     season = 'summer'\n elif (month == 'September') and (days > 21):\n     season = 'autumn'\n elif (month == 'October') and (days > 21):\n     season = 'autumn'\n elif (month == 'November') and (days > 21):\n     season = 'autumn'\n elif (month == 'December') and (days > 20):\n     season = 'winter'\n return season",
        "reference": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "160",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef solution (a, b, n):\n\t\"\"\"\n\tWrite a function to find x and y that satisfies ax + by = n.\n\tassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\t\"\"\"\n\n\n### Response:",
        "output": "def solution (a, b, n): \n    i = 0\n    while i * a <= n: \n        if (n - (i * a)) % b == 0: \n            return (\"x = \",i ,\", y = \", \n            int((n - (i * a)) / b)) \n            return 0\n        i = i + 1\n    return (\"No solution\") ",
        "reference": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "161",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_elements(list1, list2):\n\t\"\"\"\n\tWrite a function to remove all elements from a given list present in another list.\n\tassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
        "reference": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "162",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_series(n):\n\t\"\"\"\n\tWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\tassert sum_series(6)==12\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
        "reference": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "163",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef area_polygon(s,l):\n\t\"\"\"\n\tWrite a function to calculate the area of a regular polygon.\n\tassert area_polygon(4,20)==400.00000000000006\n\t\"\"\"\n\n\n### Response:",
        "output": "from math import tan, pi\ndef area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
        "reference": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "164",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef areEquivalent(num1,num2):\n\t\"\"\"\n\tWrite a python function to check whether the sum of divisors are same or not.\n\tassert areEquivalent(36,57) == False\n\t\"\"\"\n\n\n### Response:",
        "output": "import math \ndef divSum(n): \n    sum = 1; \n    i = 2; \n    while(i * i <= n): \n        if (n % i == 0): \n            sum = (sum + i +math.floor(n / i)); \n        i += 1; \n    return sum; \ndef areEquivalent(num1,num2): \n    return divSum(num1) == divSum(num2); ",
        "reference": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "165",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_char_position(str1):\n\t\"\"\"\n\tWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\tassert count_char_position(\"xbcefg\") == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
        "reference": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "166",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_even_Pair(A,N):\n\t\"\"\"\n\tWrite a python function to count the pairs with xor as an even number.\n\tassert find_even_Pair([5,4,7,2,1],5) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_even_Pair(A,N): \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair; ",
        "reference": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "167",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef next_Power_Of_2(n):\n\t\"\"\"\n\tWrite a python function to find smallest power of 2 greater than or equal to n.\n\tassert next_Power_Of_2(0) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def next_Power_Of_2(n): \n    count = 0; \n    if (n and not(n & (n - 1))): \n        return n   \n    while( n != 0): \n        n >>= 1\n        count += 1\n    return 1 << count; ",
        "reference": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "168",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef frequency(a,x):\n\t\"\"\"\n\tWrite a python function to find the frequency of a number in a given array.\n\tassert frequency([1,2,3],4) == 0\n\t\"\"\"\n\n\n### Response:",
        "output": "def frequency(a,x): \n    count = 0  \n    for i in a: \n        if i == x: count += 1\n    return count ",
        "reference": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "169",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_pell(n):\n\t\"\"\"\n\tWrite a function to calculate the nth pell number.\n\tassert get_pell(4) == 12\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_pell(n): \n    if (n <= 2): \n        return n \n    a = 1\n    b = 2\n    for i in range(3, n+1): \n        c = 2 * b + a \n        a = b \n        b = c \n    return b ",
        "reference": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "170",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_range_list(list1, m, n):\n\t\"\"\"\n\tWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\tassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
        "reference": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "171",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef perimeter_pentagon(a):\n\t\"\"\"\n\tWrite a function to find the perimeter of a pentagon.\n\tassert perimeter_pentagon(5)==25\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
        "reference": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "172",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_occurance(s):\n\t\"\"\"\n\tWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\tassert count_occurance(\"letstdlenstdporstd\") == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_occurance(s):\n  count=0\n  for i in range(len(s)):\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n      count = count + 1\n  return count",
        "reference": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "173",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_splchar(text):\n\t\"\"\"\n\tWrite a function to remove everything except alphanumeric characters from a string.\n\tassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef remove_splchar(text): \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))",
        "reference": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "174",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef group_keyvalue(l):\n\t\"\"\"\n\tWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\tassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\t\"\"\"\n\n\n### Response:",
        "output": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n         result.setdefault(k, []).append(v)\n    return result",
        "reference": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "175",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_valid_parenthese( str1):\n\t\"\"\"\n\tWrite a function to verify validity of a string of parentheses.\n\tassert is_valid_parenthese(\"(){}[]\")==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_valid_parenthese( str1):\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n                stack.append(parenthese)\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                return False\n        return len(stack) == 0",
        "reference": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "176",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef perimeter_triangle(a,b,c):\n\t\"\"\"\n\tWrite a function to find the perimeter of a triangle.\n\tassert perimeter_triangle(10,20,30)==60\n\t\"\"\"\n\n\n### Response:",
        "output": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  return perimeter",
        "reference": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "177",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef answer(L,R):\n\t\"\"\"\n\tWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\tassert answer(3,8) == (3,6)\n\t\"\"\"\n\n\n### Response:",
        "output": "def answer(L,R): \n    if (2 * L <= R): \n        return (L ,2*L)\n    else: \n        return (-1) ",
        "reference": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "178",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef string_literals(patterns,text):\n\t\"\"\"\n\tWrite a function to search some literals strings in a string.\n\tassert string_literals(['language'],'python language')==('Matched!')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef string_literals(patterns,text):\n  for pattern in patterns:\n     if re.search(pattern,  text):\n       return ('Matched!')\n     else:\n       return ('Not Matched!')",
        "reference": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "179",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_num_keith(x):\n\t\"\"\"\n\tWrite a function to find if the given number is a keith number or not.\n\tassert is_num_keith(14) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_num_keith(x): \n    terms = [] \n    temp = x \n    n = 0 \n    while (temp > 0): \n        terms.append(temp % 10) \n        temp = int(temp / 10) \n        n+=1 \n    terms.reverse() \n    next_term = 0 \n    i = n \n    while (next_term < x): \n        next_term = 0 \n        for j in range(1,n+1): \n            next_term += terms[i - j] \n        terms.append(next_term) \n        i+=1 \n    return (next_term == x) ",
        "reference": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "180",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef distance_lat_long(slat,slon,elat,elon):\n\t\"\"\"\n\tWrite a function to calculate distance between two points using latitude and longitude.\n\tassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\t\"\"\"\n\n\n### Response:",
        "output": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n return dist",
        "reference": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "181",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef common_prefix_util(str1, str2):\n\t\"\"\"\n\tWrite a function to find the longest common prefix in the given set of strings.\n\tassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\t\"\"\"\n\n\n### Response:",
        "output": "def common_prefix_util(str1, str2): \n    result = \"\"; \n    n1 = len(str1) \n    n2 = len(str2) \n    i = 0\n    j = 0\n    while i <= n1 - 1 and j <= n2 - 1: \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n    return (result) \ndef common_prefix (arr, n): \n    prefix = arr[0] \n    for i in range (1, n): \n        prefix = common_prefix_util(prefix, arr[i]) \n    return (prefix) ",
        "reference": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "182",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_character(string):\n\t\"\"\"\n\tWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\tassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef find_character(string):\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  numerical_characters = re.findall(r\"[0-9]\", string) \n  special_characters = re.findall(r\"[, .!?]\", string) \n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "reference": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "183",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_pairs(arr, n, k):\n\t\"\"\"\n\tWrite a function to count all the distinct pairs having a difference of k in any array.\n\tassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count",
        "reference": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "184",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef greater_specificnum(list,num):\n\t\"\"\"\n\tWrite a function to find all the values in a list that are greater than a specified number.\n\tassert greater_specificnum([220, 330, 500],200)==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def greater_specificnum(list,num):\n greater_specificnum=all(x >= num for x in list)\n return greater_specificnum",
        "reference": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "185",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef parabola_focus(a, b, c):\n\t\"\"\"\n\tWrite a function to find the focus of a parabola.\n\tassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\t\"\"\"\n\n\n### Response:",
        "output": "def parabola_focus(a, b, c): \n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  return focus",
        "reference": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "186",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_literals(text, patterns):\n\t\"\"\"\n\tWrite a function to search some literals strings in a string by using regex.\n\tassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef check_literals(text, patterns):\n  for pattern in patterns:\n    if re.search(pattern,  text):\n        return ('Matched!')\n    else:\n        return ('Not Matched!')",
        "reference": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "187",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef longest_common_subsequence(X, Y, m, n):\n\t\"\"\"\n\tWrite a function to find the longest common subsequence for the given two sequences.\n\tassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "reference": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "188",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef prod_Square(n):\n\t\"\"\"\n\tWrite a python function to check whether the given number can be represented by product of two squares or not.\n\tassert prod_Square(25) == False\n\t\"\"\"\n\n\n### Response:",
        "output": "def prod_Square(n):\n    for i in range(2,(n) + 1):\n        if (i*i < (n+1)):\n            for j in range(2,n + 1):\n                if ((i*i*j*j) == n):\n                    return True;\n    return False;",
        "reference": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "189",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef first_Missing_Positive(arr,n):\n\t\"\"\"\n\tWrite a python function to find the first missing positive number.\n\tassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def first_Missing_Positive(arr,n): \n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return(1)\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return(i + 1)\n    return(n + 1)",
        "reference": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "190",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Intgral_Points(x1,y1,x2,y2):\n\t\"\"\"\n\tWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\tassert count_Intgral_Points(1,1,4,4) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Intgral_Points(x1,y1,x2,y2): \n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
        "reference": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "191",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_monthnumber(monthname3):\n\t\"\"\"\n\tWrite a function to check whether the given month name contains 30 days or not.\n\tassert check_monthnumber(\"February\")==False\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False",
        "reference": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "192",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_String(str):\n\t\"\"\"\n\tWrite a python function to check whether a string has atleast one letter and one number.\n\tassert check_String('thishasboth29') == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_String(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ",
        "reference": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "193",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_tuple(test_tup):\n\t\"\"\"\n\tWrite a function to remove the duplicates from the given tuple.\n\tassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  return (res) ",
        "reference": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "194",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef octal_To_Decimal(n):\n\t\"\"\"\n\tWrite a python function to convert octal number to decimal number.\n\tassert octal_To_Decimal(25) == 21\n\t\"\"\"\n\n\n### Response:",
        "output": "def octal_To_Decimal(n):  \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit*base; \n        base = base * 8; \n    return dec_value; ",
        "reference": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "195",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef first(arr,x,n):\n\t\"\"\"\n\tWrite a python function to find the first position of an element in a sorted array.\n\tassert first([1,2,3,4,5,6,6],6,6) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "def first(arr,x,n): \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res",
        "reference": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "196",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_tuples(test_list, K):\n\t\"\"\"\n\tWrite a function to remove all the tuples with length k.\n\tassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ",
        "reference": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "197",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_exponentio(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to perform the exponentiation of the given two tuples.\n\tassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n",
        "reference": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "198",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef largest_triangle(a,b):\n\t\"\"\"\n\tWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\tassert largest_triangle(4,2)==10.392304845413264\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef largest_triangle(a,b): \n    if (a < 0 or b < 0): \n        return -1 \n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \n    return area ",
        "reference": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "199",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef highest_Power_of_2(n):\n\t\"\"\"\n\tWrite a python function to find highest power of 2 less than or equal to given number.\n\tassert highest_Power_of_2(10) == 8\n\t\"\"\"\n\n\n### Response:",
        "output": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res; ",
        "reference": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "200",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef position_max(list1):\n\t\"\"\"\n\tWrite a function to find all index positions of the maximum values in a given list.\n\tassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\t\"\"\"\n\n\n### Response:",
        "output": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result",
        "reference": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "201",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef chkList(lst):\n\t\"\"\"\n\tWrite a python function to check whether the elements in a list are same or not.\n\tassert chkList(['one','one','one']) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def chkList(lst): \n    return len(set(lst)) == 1",
        "reference": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "202",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_even(str1):\n\t\"\"\"\n\tWrite a function to remove even characters in a string.\n\tassert remove_even(\"python\")==(\"pto\")\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_even(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 != 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "reference": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "203",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef hamming_Distance(n1,n2) :\n\t\"\"\"\n\tWrite a python function to find the hamming distance between given two integers.\n\tassert hamming_Distance(4,8) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits  ",
        "reference": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "204",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count(s,c) :\n\t\"\"\"\n\tWrite a python function to count the occurrence of a given character in a string.\n\tassert count(\"abcc\",\"c\") == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def count(s,c) : \n    res = 0 \n    for i in range(len(s)) : \n        if (s[i] == c): \n            res = res + 1\n    return res ",
        "reference": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "205",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef inversion_elements(test_tup):\n\t\"\"\"\n\tWrite a function to find the inversions of tuple elements in the given tuple list.\n\tassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\t\"\"\"\n\n\n### Response:",
        "output": "def inversion_elements(test_tup):\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res) ",
        "reference": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "206",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef concatenate_elements(test_tup):\n\t\"\"\"\n\tWrite a function to perform the adjacent element concatenation in the given tuples.\n\tassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\t\"\"\"\n\n\n### Response:",
        "output": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "reference": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "207",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_longest_repeating_subseq(str):\n\t\"\"\"\n\tWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n\tassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_longest_repeating_subseq(str): \n    n = len(str) \n    dp = [[0 for k in range(n+1)] for l in range(n+1)] \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if (str[i-1] == str[j-1] and i != j): \n                dp[i][j] = 1 + dp[i-1][j-1] \n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n    return dp[n][n]",
        "reference": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "208",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_decimal(num):\n\t\"\"\"\n\tWrite a function to check the given decimal with a precision of 2 by using regex.\n\tassert is_decimal('123.11') == True\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)",
        "reference": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "209",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef heap_replace(heap,a):\n\t\"\"\"\n\tWrite a function to delete the smallest element from the given heap and then insert a new item.\n\tassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\t\"\"\"\n\n\n### Response:",
        "output": "import heapq as hq\ndef heap_replace(heap,a):\n  hq.heapify(heap)\n  hq.heapreplace(heap, a)\n  return heap",
        "reference": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "210",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_allowed_specific_char(string):\n\t\"\"\"\n\tWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\tassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)",
        "reference": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "211",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Num(n):\n\t\"\"\"\n\tWrite a python function to count numbers whose oth and nth bits are set.\n\tassert count_Num(2) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Num(n): \n    if (n == 1): \n        return 1\n    count = pow(2,n - 2) \n    return count ",
        "reference": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "212",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef fourth_Power_Sum(n):\n\t\"\"\"\n\tWrite a python function to find the sum of fourth power of n natural numbers.\n\tassert fourth_Power_Sum(2) == 17\n\t\"\"\"\n\n\n### Response:",
        "output": "import math  \ndef fourth_Power_Sum(n): \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i*i) \n    return sum",
        "reference": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "213",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef concatenate_strings(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to perform the concatenation of two string tuples.\n\tassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\t\"\"\"\n\n\n### Response:",
        "output": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "reference": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "214",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef degree_radian(radian):\n\t\"\"\"\n\tWrite a function to convert radians to degrees.\n\tassert degree_radian(90)==5156.620156177409\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef degree_radian(radian):\n degree = radian*(180/math.pi)\n return degree",
        "reference": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "215",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef decode_list(alist):\n\t\"\"\"\n\tWrite a function to decode a run-length encoded given list.\n\tassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\t\"\"\"\n\n\n### Response:",
        "output": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "reference": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "216",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_subset_list(list1, list2):\n\t\"\"\"\n\tWrite a function to check if a nested list is a subset of another nested list.\n\tassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_subset_list(list1, list2): \n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n        if i not in list1: \n            exist = False\n    return exist ",
        "reference": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "217",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef first_Repeated_Char(str):\n\t\"\"\"\n\tWrite a python function to find the first repeated character in a given string.\n\tassert first_Repeated_Char(\"Google\") == \"o\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def first_Repeated_Char(str): \n    h = {}\n    for ch in str:\n        if ch in h: \n            return ch;\n        else: \n            h[ch] = 0\n    return '\\0'",
        "reference": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "218",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef min_Operations(A,B):\n\t\"\"\"\n\tWrite a python function to find the minimum operations required to make two numbers equal.\n\tassert min_Operations(2,4) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "import math   \ndef min_Operations(A,B):  \n    if (A > B): \n        swap(A,B)  \n    B = B // math.gcd(A,B);  \n    return B - 1",
        "reference": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "219",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef extract_min_max(test_tup, K):\n\t\"\"\"\n\tWrite a function to extract maximum and minimum k elements in the given tuple.\n\tassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\t\"\"\"\n\n\n### Response:",
        "output": "\ndef extract_min_max(test_tup, K):\n  res = []\n  test_tup = list(test_tup)\n  temp = sorted(test_tup)\n  for idx, val in enumerate(temp):\n    if idx < K or idx >= len(temp) - K:\n      res.append(val)\n  res = tuple(res)\n  return (res) ",
        "reference": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "220",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef replace_max_specialchar(text,n):\n\t\"\"\"\n\tWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\tassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef replace_max_specialchar(text,n):\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "reference": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "221",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfirst_even = next((el for el in nums if el%2==0),-1)\n\t\"\"\"\n\tWrite a python function to find the first even number in a given list of numbers.\n\tassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def first_even(nums):\n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even",
        "reference": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "222",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_type(test_tuple):\n\t\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\tassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
        "reference": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "223",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_majority(arr, n, x):\n\t\"\"\"\n\tWrite a function to check for majority element in the given sorted array.\n\tassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_majority(arr, n, x):\n    i = binary_search(arr, 0, n-1, x)\n    if i == -1:\n        return False\n    if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n        return True\n    else:\n        return False\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (low + high)//2 \n        if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid -1), x)\n    return -1",
        "reference": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "224",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Set_Bits(n):\n\t\"\"\"\n\tWrite a python function to count set bits of a given number.\n\tassert count_Set_Bits(2) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "reference": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "225",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Min(arr,low,high):\n\t\"\"\"\n\tWrite a python function to find the minimum element in a sorted and rotated array.\n\tassert find_Min([1,2,3,4,5],0,4) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Min(arr,low,high): \n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high]; ",
        "reference": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "226",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef odd_values_string(str):\n\t\"\"\"\n\tWrite a python function to remove the characters which have odd index values of a given string.\n\tassert odd_values_string('abcdef') == 'ace'\n\t\"\"\"\n\n\n### Response:",
        "output": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
        "reference": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "227",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef min_of_three(a,b,c):\n\t\"\"\"\n\tWrite a function to find minimum of three numbers.\n\tassert min_of_three(10,20,0)==0\n\t\"\"\"\n\n\n### Response:",
        "output": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
        "reference": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "228",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n\t\"\"\"\n\tWrite a python function to check whether all the bits are unset in the given range or not.\n\tassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
        "reference": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "229",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef re_arrange_array(arr, n):\n\t\"\"\"\n\tWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\tassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\t\"\"\"\n\n\n### Response:",
        "output": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
        "reference": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "230",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef replace_blank(str1,char):\n\t\"\"\"\n\tWrite a function to replace blank spaces with any character in a string.\n\tassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\t\"\"\"\n\n\n### Response:",
        "output": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
        "reference": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "231",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_sum(tri, n):\n\t\"\"\"\n\tWrite a function to find the maximum sum in the given right triangle of numbers.\n\tassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_sum(tri, n): \n    if n > 1: \n        tri[1][1] = tri[1][1]+tri[0][0] \n        tri[1][0] = tri[1][0]+tri[0][0] \n    for i in range(2, n): \n        tri[i][0] = tri[i][0] + tri[i-1][0] \n        tri[i][i] = tri[i][i] + tri[i-1][i-1] \n        for j in range(1, i): \n            if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \n                tri[i][j] = tri[i][j] + tri[i-1][j-1] \n            else: \n                tri[i][j] = tri[i][j]+tri[i-1][j] \n    return (max(tri[n-1]))",
        "reference": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "232",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef larg_nnum(list1,n):\n\t\"\"\"\n\tWrite a function to get the n largest items from a dataset.\n\tassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\t\"\"\"\n\n\n### Response:",
        "output": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
        "reference": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "233",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef lateralsuface_cylinder(r,h):\n\t\"\"\"\n\tWrite a function to find the lateral surface area of a cylinder.\n\tassert lateralsuface_cylinder(10,5)==314.15000000000003\n\t\"\"\"\n\n\n### Response:",
        "output": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface",
        "reference": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "234",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef volume_cube(l):\n\t\"\"\"\n\tWrite a function to find the volume of a cube.\n\tassert volume_cube(3)==27\n\t\"\"\"\n\n\n### Response:",
        "output": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
        "reference": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "235",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef even_bit_set_number(n):\n\t\"\"\"\n\tWrite a python function to set all even bits of a given number.\n\tassert even_bit_set_number(10) == 10\n\t\"\"\"\n\n\n### Response:",
        "output": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
        "reference": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "236",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef No_of_Triangle(N,K):\n\t\"\"\"\n\tWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\tassert No_of_Triangle(4,2) == 7\n\t\"\"\"\n\n\n### Response:",
        "output": "def No_of_Triangle(N,K):\n    if (N < K):\n        return -1;\n    else:\n        Tri_up = 0;\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\n        Tri_down = 0;\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\n        return Tri_up + Tri_down;",
        "reference": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "237",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_occurences(test_list):\n\t\"\"\"\n\tWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\tassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
        "reference": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "238",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef number_of_substrings(str):\n\t\"\"\"\n\tWrite a python function to count number of non-empty substrings of a given string.\n\tassert number_of_substrings(\"abc\") == 6\n\t\"\"\"\n\n\n### Response:",
        "output": "def number_of_substrings(str): \n    str_len = len(str); \n    return int(str_len * (str_len + 1) / 2); ",
        "reference": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "239",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_total_number_of_sequences(m,n):\n\t\"\"\"\n\tWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\tassert get_total_number_of_sequences(10, 4) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_total_number_of_sequences(m,n): \n    T=[[0 for i in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i==0 or j==0: \n                T[i][j]=0\n            elif i<j: \n                T[i][j]=0\n            elif j==1: \n                T[i][j]=i \n            else: \n                T[i][j]=T[i-1][j]+T[i//2][j-1] \n    return T[m][n]",
        "reference": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "240",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef replace_list(list1,list2):\n\t\"\"\"\n\tWrite a function to replace the last element of the list with another list.\n\tassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\t\"\"\"\n\n\n### Response:",
        "output": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
        "reference": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "241",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef array_3d(m,n,o):\n\t\"\"\"\n\tWrite a function to generate a 3d array having each element as '*'.\n\tassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\t\"\"\"\n\n\n### Response:",
        "output": "def array_3d(m,n,o):\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n return array_3d",
        "reference": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "242",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_charac(str1):\n\t\"\"\"\n\tWrite a function to count total characters in a string.\n\tassert count_charac(\"python programming\")==18\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
        "reference": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "243",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sort_on_occurence(lst):\n\t\"\"\"\n\tWrite a function to sort the given list based on the occurrence of first element of tuples.\n\tassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\t\"\"\"\n\n\n### Response:",
        "output": "def sort_on_occurence(lst): \n    dct = {} \n    for i, j in lst: \n        dct.setdefault(i, []).append(j) \n    return ([(i, *dict.fromkeys(j), len(j)) \n                for i, j in dct.items()]) ",
        "reference": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "244",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef next_Perfect_Square(N):\n\t\"\"\"\n\tWrite a python function to find the next perfect square greater than a given number.\n\tassert next_Perfect_Square(35) == 36\n\t\"\"\"\n\n\n### Response:",
        "output": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
        "reference": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "245",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_sum(arr, n):\n\t\"\"\"\n\tWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\tassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_sum(arr, n): \n    MSIBS = arr[:] \n    for i in range(n): \n        for j in range(0, i): \n            if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n                MSIBS[i] = MSIBS[j] + arr[i] \n    MSDBS = arr[:] \n    for i in range(1, n + 1): \n        for j in range(1, i): \n            if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n                MSDBS[-i] = MSDBS[-j] + arr[-i] \n    max_sum = float(\"-Inf\") \n    for i, j, k in zip(MSIBS, MSDBS, arr): \n        max_sum = max(max_sum, i + j - k) \n    return max_sum",
        "reference": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "246",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef babylonian_squareroot(number):\n\t\"\"\"\n\tWrite a function for computing square roots using the babylonian method.\n\tassert babylonian_squareroot(10)==3.162277660168379\n\t\"\"\"\n\n\n### Response:",
        "output": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;",
        "reference": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "247",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef lps(str):\n\t\"\"\"\n\tWrite a function to find the longest palindromic subsequence in the given string.\n\tassert lps(\"TENS FOR TENS\") == 5 \n\t\"\"\"\n\n\n### Response:",
        "output": "def lps(str): \n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1]",
        "reference": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "248",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef harmonic_sum(n):\n\t\"\"\"\n\tWrite a function to calculate the harmonic sum of n-1.\n\tassert harmonic_sum(7) == 2.5928571428571425\n\t\"\"\"\n\n\n### Response:",
        "output": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "reference": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "249",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef intersection_array(array_nums1,array_nums2):\n\t\"\"\"\n\tWrite a function to find the intersection of two arrays using lambda function.\n\tassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\t\"\"\"\n\n\n### Response:",
        "output": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
        "reference": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "250",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_X(tup, x):\n\t\"\"\"\n\tWrite a python function to count the occcurences of an element in a tuple.\n\tassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
        "reference": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "251",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef insert_element(list,element):\n\t\"\"\"\n\tWrite a function to insert an element before each element of a list.\n\tassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\t\"\"\"\n\n\n### Response:",
        "output": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
        "reference": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "252",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef convert(numbers):\n\t\"\"\"\n\tWrite a python function to convert complex numbers to polar coordinates.\n\tassert convert(1) == (1.0, 0.0)\n\t\"\"\"\n\n\n### Response:",
        "output": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ",
        "reference": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "253",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_integer(list1):\n\t\"\"\"\n\tWrite a python function to count integers from a given list.\n\tassert count_integer([1,2,'abc',1.2]) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
        "reference": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "254",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef words_ae(text):\n\t\"\"\"\n\tWrite a function to find all words starting with 'a' or 'e' in a given string.\n\tassert words_ae(\"python programe\")==['ame']\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef words_ae(text):\n list = re.findall(\"[ae]\\w+\", text)\n return list",
        "reference": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "255",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef combinations_colors(l, n):\n\t\"\"\"\n\tWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\tassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\t\"\"\"\n\n\n### Response:",
        "output": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\r",
        "reference": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "256",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Primes_nums(n):\n\t\"\"\"\n\tWrite a python function to count the number of prime numbers less than a given non-negative number.\n\tassert count_Primes_nums(5) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
        "reference": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "257",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef swap_numbers(a,b):\n\t\"\"\"\n\tWrite a function to swap two numbers.\n\tassert swap_numbers(10,20)==(20,10)\n\t\"\"\"\n\n\n### Response:",
        "output": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
        "reference": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "258",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_odd(array_nums):\n\t\"\"\"\n\tWrite a function to find number of odd elements in the given list using lambda function.\n\tassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_odd(array_nums):\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd",
        "reference": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "259",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef maximize_elements(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to maximize the given two tuples.\n\tassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\t\"\"\"\n\n\n### Response:",
        "output": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "reference": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "260",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef newman_prime(n):\n\t\"\"\"\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\tassert newman_prime(3) == 7 \n\t\"\"\"\n\n\n### Response:",
        "output": "def newman_prime(n): \n    if n == 0 or n == 1: \n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "reference": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "261",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef division_elements(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to perform mathematical division operation across the given tuples.\n\tassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\t\"\"\"\n\n\n### Response:",
        "output": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "reference": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "262",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef split_two_parts(list1, L):\n\t\"\"\"\n\tWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\tassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\t\"\"\"\n\n\n### Response:",
        "output": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
        "reference": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "263",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef merge_dict(d1,d2):\n\t\"\"\"\n\tWrite a function to merge two dictionaries.\n\tassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\t\"\"\"\n\n\n### Response:",
        "output": "def merge_dict(d1,d2):\n d = d1.copy()\n d.update(d2)\n return d",
        "reference": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "264",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef dog_age(h_age):\n\t\"\"\"\n\tWrite a function to calculate a dog's age in dog's years.\n\tassert dog_age(12)==61\n\t\"\"\"\n\n\n### Response:",
        "output": "def dog_age(h_age):\n if h_age < 0:\n     exit()\n elif h_age <= 2:\n     d_age = h_age * 10.5\n else:\n     d_age = 21 + (h_age - 2)*4\n return d_age",
        "reference": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "265",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef list_split(S, step):\n\t\"\"\"\n\tWrite a function to split a list for every nth element.\n\tassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\t\"\"\"\n\n\n### Response:",
        "output": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
        "reference": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "266",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef lateralsurface_cube(l):\n\t\"\"\"\n\tWrite a function to find the lateral surface area of a cube.\n\tassert lateralsurface_cube(5)==100\n\t\"\"\"\n\n\n### Response:",
        "output": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
        "reference": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "267",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef square_Sum(n):\n\t\"\"\"\n\tWrite a python function to find the sum of squares of first n odd natural numbers.\n\tassert square_Sum(2) == 10\n\t\"\"\"\n\n\n### Response:",
        "output": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
        "reference": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "268",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_star_num(n):\n\t\"\"\"\n\tWrite a function to find the n'th star number.\n\tassert find_star_num(3) == 37\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_star_num(n): \n    return (6 * n * (n - 1) + 1) ",
        "reference": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "269",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef ascii_value(k):\n\t\"\"\"\n\tWrite a function to find the ascii value of a character.\n\tassert ascii_value('A')==65\n\t\"\"\"\n\n\n### Response:",
        "output": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
        "reference": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "270",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_even_and_even_index(arr,n):\n\t\"\"\"\n\tWrite a python function to find the sum of even numbers at even positions.\n\tassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_even_and_even_index(arr,n):  \n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
        "reference": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "271",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef even_Power_Sum(n):\n\t\"\"\"\n\tWrite a python function to find the sum of fifth power of first n even natural numbers.\n\tassert even_Power_Sum(2) == 1056\n\t\"\"\"\n\n\n### Response:",
        "output": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
        "reference": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "272",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef rear_extract(test_list):\n\t\"\"\"\n\tWrite a function to perfom the rear element extraction from list of tuples records.\n\tassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\t\"\"\"\n\n\n### Response:",
        "output": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
        "reference": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "273",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef substract_elements(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\tassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\t\"\"\"\n\n\n### Response:",
        "output": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
        "reference": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "274",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef even_binomial_Coeff_Sum( n):\n\t\"\"\"\n\tWrite a python function to find sum of even index binomial coefficients.\n\tassert even_binomial_Coeff_Sum(4) == 8\n\t\"\"\"\n\n\n### Response:",
        "output": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
        "reference": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "275",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_Position(a,n,m):\n\t\"\"\"\n\tWrite a python function to find the position of the last removed element from the given array.\n\tassert get_Position([2,5,4],3,2) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "import math as mt \ndef get_Position(a,n,m): \n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n        if (maxx < a[i]): \n            maxx = a[i] \n            result = i \n    return result + 1",
        "reference": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "276",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef volume_cylinder(r,h):\n\t\"\"\"\n\tWrite a function to find the volume of a cylinder.\n\tassert volume_cylinder(10,5)==1570.7500000000002\n\t\"\"\"\n\n\n### Response:",
        "output": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume",
        "reference": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "277",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef dict_filter(dict,n):\n\t\"\"\"\n\tWrite a function to filter a dictionary based on values.\n\tassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\t\"\"\"\n\n\n### Response:",
        "output": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
        "reference": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "278",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_first_elements(test_tup):\n\t\"\"\"\n\tWrite a function to find the element count that occurs before the record in the given tuple.\n\tassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ",
        "reference": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "279",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_num_decagonal(n):\n\t\"\"\"\n\tWrite a function to find the nth decagonal number.\n\tassert is_num_decagonal(3) == 27\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_num_decagonal(n): \n    return 4 * n * n - 3 * n ",
        "reference": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "280",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sequential_search(dlist, item):\n\t\"\"\"\n\tWrite a function to search an element in the given array by using sequential search.\n\tassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\t\"\"\"\n\n\n### Response:",
        "output": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
        "reference": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "281",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef all_unique(test_list):\n\t\"\"\"\n\tWrite a python function to check if the elements of a given list are unique or not.\n\tassert all_unique([1,2,3]) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
        "reference": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "282",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sub_list(nums1,nums2):\n\t\"\"\"\n\tWrite a function to substaract two lists using map and lambda function.\n\tassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\t\"\"\"\n\n\n### Response:",
        "output": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
        "reference": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "283",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef validate(n):\n\t\"\"\"\n\tWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\tassert validate(1234) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
        "reference": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "284",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_element(list,element):\n\t\"\"\"\n\tWrite a function to check whether all items of a list are equal to a given string.\n\tassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
        "reference": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "285",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef text_match_two_three(text):\n\t\"\"\"\n\tWrite a function that matches a string that has an a followed by two to three 'b'.\n\tassert text_match_two_three(\"ac\")==('Not matched!')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "reference": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "286",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_sub_array_sum_repeated(a, n, k):\n\t\"\"\"\n\tWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\tassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_sub_array_sum_repeated(a, n, k): \n    max_so_far = -2147483648\n    max_ending_here = 0\n    for i in range(n*k): \n        max_ending_here = max_ending_here + a[i%n] \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n        if (max_ending_here < 0): \n            max_ending_here = 0\n    return max_so_far",
        "reference": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "287",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef square_Sum(n):\n\t\"\"\"\n\tWrite a python function to find the sum of squares of first n even natural numbers.\n\tassert square_Sum(2) == 20\n\t\"\"\"\n\n\n### Response:",
        "output": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
        "reference": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "288",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef modular_inverse(arr, N, P):\n\t\"\"\"\n\tWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\tassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def modular_inverse(arr, N, P):\n    current_element = 0\n    for i in range(0, N):\n        if ((arr[i] * arr[i]) % P == 1):\n            current_element = current_element + 1\n    return current_element",
        "reference": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "289",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef odd_Days(N):\n\t\"\"\"\n\tWrite a python function to calculate the number of odd days in a given year.\n\tassert odd_Days(100) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "def odd_Days(N): \n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        leap -= hund1 \n    if (hund4): \n        ordd -= hund4 \n        leap += hund4 \n    days = ordd + leap * 2\n    odd = days % 7\n    return odd ",
        "reference": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "290",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_length(list1):\n\t\"\"\"\n\tWrite a function to find the list of lists with maximum length.\n\tassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
        "reference": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "291",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_no_of_ways(n, k):\n\t\"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\tassert count_no_of_ways(2, 4) == 16\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_no_of_ways(n, k): \n    dp = [0] * (n + 1) \n    total = k \n    mod = 1000000007\n    dp[1] = k \n    dp[2] = k * k     \n    for i in range(3,n+1): \n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n    return dp[n]",
        "reference": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "292",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find(n,m):\n\t\"\"\"\n\tWrite a python function to find quotient of two numbers.\n\tassert find(10,3) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def find(n,m):  \n    q = n//m \n    return (q)",
        "reference": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "293",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef otherside_rightangle(w,h):\n\t\"\"\"\n\tWrite a function to find the third side of a right angled triangle.\n\tassert otherside_rightangle(7,8)==10.63014581273465\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
        "reference": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "294",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_val(listval):\n\t\"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\tassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
        "reference": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "295",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_div(number):\n\t\"\"\"\n\tWrite a function to return the sum of all divisors of a number.\n\tassert sum_div(8)==7\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
        "reference": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "296",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_Inv_Count(arr,n):\n\t\"\"\"\n\tWrite a python function to count inversions in an array.\n\tassert get_Inv_Count([1,20,6,4,5],5) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_Inv_Count(arr,n): \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
        "reference": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "297",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef flatten_list(list1):\n\t\"\"\"\n\tWrite a function to flatten a given nested list structure.\n\tassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\t\"\"\"\n\n\n### Response:",
        "output": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
        "reference": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "298",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef intersection_nested_lists(l1, l2):\n\t\"\"\"\n\tWrite a function to find the nested list elements which are present in another list.\n\tassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\t\"\"\"\n\n\n### Response:",
        "output": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result",
        "reference": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "299",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_aggregate(stdata):\n\t\"\"\"\n\tWrite a function to calculate the maximum aggregate from the list of tuples.\n\tassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
        "reference": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "300",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_binary_seq(n):\n\t\"\"\"\n\tWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\tassert count_binary_seq(1) == 2.0\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_binary_seq(n): \n    nCr = 1\n    res = 1\n    for r in range(1, n + 1): \n        nCr = (nCr * (n + 1 - r)) / r \n        res += nCr * nCr \n    return res ",
        "reference": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "301",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef dict_depth(d):\n\t\"\"\"\n\tWrite a function to find the depth of a dictionary.\n\tassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\t\"\"\"\n\n\n### Response:",
        "output": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "reference": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "302",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef set_Bit_Number(n):\n\t\"\"\"\n\tWrite a python function to find the most significant bit number which is also a set bit.\n\tassert set_Bit_Number(6) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def set_Bit_Number(n): \n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    while (n > 0): \n        n = int(n / 2); \n        msb += 1; \n    return (1 << msb)",
        "reference": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "303",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef solve(a,n):\n\t\"\"\"\n\tWrite a python function to check whether the count of inversion of two types are same or not.\n\tassert solve([1,0,2],3) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "import sys \ndef solve(a,n):   \n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n            return False  \n        mx = max(mx,a[j - 1])    \n    return True",
        "reference": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "304",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Element(arr,ranges,rotations,index) :\n\t\"\"\"\n\tWrite a python function to find element at a given index after number of rotations.\n\tassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ",
        "reference": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "305",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef start_withp(words):\n\t\"\"\"\n\tWrite a function to match two words from a list of words starting with letter 'p'.\n\tassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
        "reference": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "306",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_sum_increasing_subseq(a, n, index, k):\n\t\"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\tassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0 for i in range(n)] \n            for i in range(n)]\n    for i in range(n):\n        if a[i] > a[0]:\n            dp[0][i] = a[i] + a[0]\n        else:\n            dp[0][i] = a[i]\n    for i in range(1, n):\n        for j in range(n):\n            if a[j] > a[i] and j > i:\n                if dp[i - 1][i] + a[j] > dp[i - 1][j]:\n                    dp[i][j] = dp[i - 1][i] + a[j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[index][k]",
        "reference": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "307",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef colon_tuplex(tuplex,m,n):\n\t\"\"\"\n\tWrite a function to get a colon of a tuple.\n\tassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\t\"\"\"\n\n\n### Response:",
        "output": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon",
        "reference": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "308",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\tWrite a function to find the specified number of largest products from two given lists.\n\tassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\t\"\"\"\n\n\n### Response:",
        "output": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
        "reference": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "309",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef maximum(a,b):\n\t\"\"\"\n\tWrite a python function to find the maximum of two numbers.\n\tassert maximum(5,10) == 10\n\t\"\"\"\n\n\n### Response:",
        "output": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
        "reference": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "310",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef string_to_tuple(str1):\n\t\"\"\"\n\tWrite a function to convert a given string to a tuple.\n\tassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\t\"\"\"\n\n\n### Response:",
        "output": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "reference": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "311",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef set_left_most_unset_bit(n):\n\t\"\"\"\n\tWrite a python function to set the left most unset bit.\n\tassert set_left_most_unset_bit(10) == 14\n\t\"\"\"\n\n\n### Response:",
        "output": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ",
        "reference": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "312",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef volume_cone(r,h):\n\t\"\"\"\n\tWrite a function to find the volume of a cone.\n\tassert volume_cone(5,12)==314.15926535897927\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume",
        "reference": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "313",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef pos_nos(list1):\n\t\"\"\"\n\tWrite a python function to print positive numbers in a list.\n\tassert pos_nos([-1,-2,1,2]) == 1,2\n\t\"\"\"\n\n\n### Response:",
        "output": "def pos_nos(list1):\n  for num in list1: \n    if num >= 0: \n       return num ",
        "reference": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "314",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_sum_rectangular_grid(grid, n) :\n\t\"\"\"\n\tWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\tassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_sum_rectangular_grid(grid, n) : \n    incl = max(grid[0][0], grid[1][0]) \n    excl = 0\n    for i in range(1, n) : \n        excl_new = max(excl, incl) \n        incl = excl + max(grid[0][i], grid[1][i]) \n        excl = excl_new \n    return max(excl, incl)",
        "reference": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "315",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Max_Len_Even(str):\n\t\"\"\"\n\tWrite a python function to find the first maximum length of even word.\n\tassert find_Max_Len_Even(\"python language\") == \"language\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Max_Len_Even(str): \n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n            currlen = 0 \n        else : \n            currlen += 1\n        i += 1\n    if (currlen % 2 == 0): \n        if (maxlen < currlen): \n            maxlen = currlen \n            st = i - currlen \n    if (st == -1): \n        return \"-1\" \n    return str[st: st + maxlen] ",
        "reference": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "316",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_last_occurrence(A, x):\n\t\"\"\"\n\tWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\tassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result ",
        "reference": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "317",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef modified_encode(alist):\n\t\"\"\"\n\tWrite a function to reflect the modified run-length encoding from a list.\n\tassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\t\"\"\"\n\n\n### Response:",
        "output": "from itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "reference": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "318",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_volume (s):\n\t\"\"\"\n\tWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\tassert max_volume(8) == 18\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_volume (s): \n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        for j in range(s): \n            k = s - i - j \n            maxvalue = max(maxvalue, i * j * k)         \n    return maxvalue ",
        "reference": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "319",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_long_word(text):\n\t\"\"\"\n\tWrite a function to find all five characters long word in the given string by using regex.\n\tassert find_long_word('Please move back to strem') == ['strem']\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef find_long_word(text):\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "reference": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "320",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_difference(n):\n\t\"\"\"\n\tWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\tassert sum_difference(12)==5434\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_difference(n):\n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares",
        "reference": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "321",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_demlo(s):\n\t\"\"\"\n\tWrite a function to find the demlo number for the given number.\n\tassert find_demlo(\"111111\") == '12345654321'\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_demlo(s): \n    l = len(s) \n    res = \"\" \n    for i in range(1,l+1): \n        res = res + str(i) \n    for i in range(l-1,0,-1): \n        res = res + str(i) \n    return res     ",
        "reference": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "322",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef position_min(list1):\n\t\"\"\"\n\tWrite a function to find all index positions of the minimum values in a given list.\n\tassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\t\"\"\"\n\n\n### Response:",
        "output": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result",
        "reference": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "323",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef re_arrange(arr, n):\n\t\"\"\"\n\tWrite a function to re-arrange the given array in alternating positive and negative items.\n\tassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\t\"\"\"\n\n\n### Response:",
        "output": "def right_rotate(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\ndef re_arrange(arr, n):\n    out_of_place = -1\n    for index in range(n):\n        if (out_of_place >= 0):\n            if ((arr[index] >= 0 and arr[out_of_place] < 0) or\n            (arr[index] < 0 and arr[out_of_place] >= 0)):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if (index-out_of_place > 2):\n                    out_of_place += 2\n                else:\n                    out_of_place = - 1\n        if (out_of_place == -1):\n            if ((arr[index] >= 0 and index % 2 == 0) or\n             (arr[index] < 0 and index % 2 == 1)):\n                out_of_place = index\n    return arr",
        "reference": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "324",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_of_alternates(test_tuple):\n\t\"\"\"\n\tWrite a function to extract the sum of alternate chains of tuples.\n\tassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_of_alternates(test_tuple):\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2)) ",
        "reference": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "325",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_Min_Squares(n):\n\t\"\"\"\n\tWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\tassert get_Min_Squares(6) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_Min_Squares(n):\n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        if temp > n:\n            break\n        else:\n            res = min(res,1 + get_Min_Squares(n  - temp)) \n    return res;",
        "reference": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "326",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef most_occurrences(test_list):\n\t\"\"\"\n\tWrite a function to get the word with most number of occurrences in the given strings list.\n\tassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import defaultdict \n\ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res)) ",
        "reference": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "327",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_isosceles(x,y,z):\n\t\"\"\"\n\tWrite a function to print check if the triangle is isosceles or not.\n\tassert check_isosceles(6,8,12)==False \n\t\"\"\"\n\n\n### Response:",
        "output": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n       return True\n  else:\n     return False",
        "reference": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "328",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef rotate_left(list1,m,n):\n\t\"\"\"\n\tWrite a function to rotate a given list by specified number of items to the left direction.\n\tassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\t\"\"\"\n\n\n### Response:",
        "output": "def rotate_left(list1,m,n):\n  result =  list1[m:]+list1[:n]\n  return result",
        "reference": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "329",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef neg_count(list):\n\t\"\"\"\n\tWrite a python function to count negative numbers in a list.\n\tassert neg_count([-1,-2,3,-4,-5]) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def neg_count(list):\n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n  return neg_count ",
        "reference": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "330",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_char(text):\n\t\"\"\"\n\tWrite a function to find all three, four, five characters long words in the given string by using regex.\n\tassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef find_char(text):\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "reference": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "331",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_unset_bits(n):\n\t\"\"\"\n\tWrite a python function to count unset bits of a given number.\n\tassert count_unset_bits(2) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_unset_bits(n): \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count  ",
        "reference": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "332",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef char_frequency(str1):\n\t\"\"\"\n\tWrite a function to count character frequency of a given string.\n\tassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\t\"\"\"\n\n\n### Response:",
        "output": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict",
        "reference": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "333",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef Sort(sub_li):\n\t\"\"\"\n\tWrite a python function to sort a list according to the second element in sublist.\n\tassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\t\"\"\"\n\n\n### Response:",
        "output": "def Sort(sub_li): \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li ",
        "reference": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "334",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_Validity(a,b,c):\n\t\"\"\"\n\tWrite a python function to check whether the triangle is valid or not if sides are given.\n\tassert check_Validity(1,2,3) == False\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_Validity(a,b,c):  \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True        ",
        "reference": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "335",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef ap_sum(a,n,d):\n\t\"\"\"\n\tWrite a function to find the sum of arithmetic progression.\n\tassert ap_sum(1,5,2)==25\n\t\"\"\"\n\n\n### Response:",
        "output": "def ap_sum(a,n,d):\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total",
        "reference": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "336",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_monthnum(monthname1):\n\t\"\"\"\n\tWrite a function to check whether the given month name contains 28 days or not.\n\tassert check_monthnum(\"February\")==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n  else:\n    return False",
        "reference": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "337",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef text_match_word(text):\n\t\"\"\"\n\tWrite a function that matches a word at the end of a string, with optional punctuation.\n\tassert text_match_word(\"python.\")==('Found a match!')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef text_match_word(text):\n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'",
        "reference": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "338",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Substring_With_Equal_Ends(s):\n\t\"\"\"\n\tWrite a python function to count the number of substrings with same first and last characters.\n\tassert count_Substring_With_Equal_Ends('aba') == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n):\n        for j in range(1,n-i+1): \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ",
        "reference": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "339",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Divisor(x,y):\n\t\"\"\"\n\tWrite a python function to find the maximum occuring divisor in an interval.\n\tassert find_Divisor(2,2) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Divisor(x,y):  \n    if (x==y): \n        return y \n    return 2",
        "reference": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "340",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_three_smallest_nums(lst):\n\t\"\"\"\n\tWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\tassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_three_smallest_nums(lst):\n    return sum(sorted([x for x in lst if x > 0])[:3])",
        "reference": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "341",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef set_to_tuple(s):\n\t\"\"\"\n\tWrite a function to convert the given set into ordered tuples.\n\tassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\t\"\"\"\n\n\n### Response:",
        "output": "def set_to_tuple(s):\n  t = tuple(sorted(s))\n  return (t)",
        "reference": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "342",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_minimum_range(list):\n\t\"\"\"\n\tWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\tassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\t\"\"\"\n\n\n### Response:",
        "output": "from heapq import heappop, heappush\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        return self.value < other.value\ndef find_minimum_range(list):\n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])",
        "reference": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "343",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef dig_let(s):\n\t\"\"\"\n\tWrite a function to calculate the number of digits and letters in a string.\n\tassert dig_let(\"python\")==(6,0)\n\t\"\"\"\n\n\n### Response:",
        "output": "def dig_let(s):\n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n    elif c.isalpha():\n        l=l+1\n    else:\n        pass\n return (l,d)",
        "reference": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "344",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Odd_Squares(n,m):\n\t\"\"\"\n\tWrite a python function to find number of elements with odd factors in a given range.\n\tassert count_Odd_Squares(5,100) == 8\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Odd_Squares(n,m): \n    return int(m**0.5) - int((n-1)**0.5) ",
        "reference": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "345",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef diff_consecutivenums(nums):\n\t\"\"\"\n\tWrite a function to find the difference between two consecutive numbers in a given list.\n\tassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\t\"\"\"\n\n\n### Response:",
        "output": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result",
        "reference": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "346",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef zigzag(n, k):\n\t\"\"\"\n\tWrite a function to find entringer number e(n, k).\n\tassert zigzag(4, 3) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "def zigzag(n, k): \n    if (n == 0 and k == 0): \n        return 1\n    if (k == 0): \n        return 0\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "reference": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "347",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Squares(m,n):\n\t\"\"\"\n\tWrite a python function to count the number of squares in a rectangle.\n\tassert count_Squares(4,3) == 20\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Squares(m,n): \n    if (n < m): \n        temp = m \n        m = n \n        n = temp \n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "reference": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "348",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_ways(M):\n\t\"\"\"\n\tWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\tassert find_ways(4) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def bin_coff(n, r): \n    val = 1\n    if (r > (n - r)): \n        r = (n - r) \n    for i in range(0, r): \n        val *= (n - i) \n        val //= (i + 1) \n    return val \ndef find_ways(M): \n    n = M // 2\n    a = bin_coff(2 * n, n) \n    b = a // (n + 1) \n    return (b) ",
        "reference": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "349",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check(string) :\n\t\"\"\"\n\tWrite a python function to check whether the given string is a binary string or not.\n\tassert check(\"01010101010\") == \"Yes\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def check(string) :\n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return (\"Yes\") \n    else : \n        return (\"No\") ",
        "reference": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "350",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef minimum_Length(s) :\n\t\"\"\"\n\tWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\tassert minimum_Length(\"mnm\") == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def minimum_Length(s) : \n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc ",
        "reference": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "351",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef first_Element(arr,n,k):\n\t\"\"\"\n\tWrite a python function to find the first element occurring k times in a given array.\n\tassert first_Element([0,1,2,3,4,5],6,1) == 0\n\t\"\"\"\n\n\n### Response:",
        "output": "def first_Element(arr,n,k): \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1",
        "reference": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "352",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef unique_Characters(str):\n\t\"\"\"\n\tWrite a python function to check whether all the characters in a given string are unique.\n\tassert unique_Characters('aba') == False\n\t\"\"\"\n\n\n### Response:",
        "output": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;",
        "reference": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "353",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_column(list1, n):\n\t\"\"\"\n\tWrite a function to remove a specified column from a given nested list.\n\tassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_column(list1, n):\n   for i in list1: \n    del i[n] \n   return list1",
        "reference": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "354",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef tn_ap(a,n,d):\n\t\"\"\"\n\tWrite a function to find t-nth term of arithemetic progression.\n\tassert tn_ap(1,5,2)==9\n\t\"\"\"\n\n\n### Response:",
        "output": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  return tn",
        "reference": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "355",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Rectangles(radius):\n\t\"\"\"\n\tWrite a python function to count the number of rectangles in a circle of radius r.\n\tassert count_Rectangles(2) == 8\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Rectangles(radius):  \n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles ",
        "reference": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "356",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_angle(a,b):\n\t\"\"\"\n\tWrite a function to find the third angle of a triangle using two angles.\n\tassert find_angle(47,89)==44\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_angle(a,b):\n c = 180 - (a + b)\n return c\n",
        "reference": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "357",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_max(test_list):\n\t\"\"\"\n\tWrite a function to find the maximum element of all the given tuple records.\n\tassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  return (res) ",
        "reference": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "358",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef moddiv_list(nums1,nums2):\n\t\"\"\"\n\tWrite a function to find modulo division of two lists using map and lambda function.\n\tassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\t\"\"\"\n\n\n### Response:",
        "output": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)",
        "reference": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "359",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef Check_Solution(a,b,c):\n\t\"\"\"\n\tWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\tassert Check_Solution(1,3,2) == \"Yes\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def Check_Solution(a,b,c): \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ",
        "reference": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "360",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_carol(n):\n\t\"\"\"\n\tWrite a function to find the n\u2019th carol number.\n\tassert get_carol(2) == 7\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_carol(n): \n    result = (2**n) - 1\n    return result * result - 2",
        "reference": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "361",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_empty(list1):\n\t\"\"\"\n\tWrite a function to remove empty lists from a given list of lists.\n\tassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_empty(list1):\n  remove_empty = [x for x in list1 if x]\n  return remove_empty",
        "reference": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "362",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_occurrences(nums):\n\t\"\"\"\n\tWrite a python function to find the item with maximum occurrences in a given list.\n\tassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result",
        "reference": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "363",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef add_K_element(test_list, K):\n\t\"\"\"\n\tWrite a function to add the k elements to each element in the tuple.\n\tassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\t\"\"\"\n\n\n### Response:",
        "output": "def add_K_element(test_list, K):\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  return (res) ",
        "reference": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "364",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef min_flip_to_make_string_alternate(str):\n\t\"\"\"\n\tWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\tassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def make_flip(ch): \n    return '1' if (ch == '0') else '0'\ndef get_flip_with_starting_charcter(str, expected): \n    flip_count = 0\n    for i in range(len( str)): \n        if (str[i] != expected): \n            flip_count += 1\n        expected = make_flip(expected) \n    return flip_count \ndef min_flip_to_make_string_alternate(str): \n    return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
        "reference": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "365",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Digit(n):\n\t\"\"\"\n\tWrite a python function to count the number of digits of a given number.\n\tassert count_Digit(12345) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_Digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count",
        "reference": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "366",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef adjacent_num_product(list_nums):\n\t\"\"\"\n\tWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\tassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\t\"\"\"\n\n\n### Response:",
        "output": "def adjacent_num_product(list_nums):\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "reference": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "367",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_tree_balanced(root):\n\t\"\"\"\n\tWrite a function to check if a binary tree is balanced or not.\n\tassert is_tree_balanced(root) == False\n\t\"\"\"\n\n\n### Response:",
        "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\ndef get_height(root): \n    if root is None: \n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1\ndef is_tree_balanced(root): \n    if root is None: \n        return True\n    lh = get_height(root.left) \n    rh = get_height(root.right) \n    if (abs(lh - rh) <= 1) and is_tree_balanced( \n    root.left) is True and is_tree_balanced( root.right) is True: \n        return True\n    return False",
        "reference": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "368",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef repeat_tuples(test_tup, N):\n\t\"\"\"\n\tWrite a function to repeat the given tuple n times.\n\tassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\t\"\"\"\n\n\n### Response:",
        "output": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  return (res) ",
        "reference": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "369",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef lateralsurface_cuboid(l,w,h):\n\t\"\"\"\n\tWrite a function to find the lateral surface area of cuboid\n\tassert lateralsurface_cuboid(8,5,6)==156\n\t\"\"\"\n\n\n### Response:",
        "output": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  return LSA",
        "reference": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "370",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef float_sort(price):\n\t\"\"\"\n\tWrite a function to sort a tuple by its float element.\n\tassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\t\"\"\"\n\n\n### Response:",
        "output": "def float_sort(price):\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  return float_sort",
        "reference": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "371",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef smallest_missing(A, left_element, right_element):\n\t\"\"\"\n\tWrite a function to find the smallest missing element in a sorted array.\n\tassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\t\"\"\"\n\n\n### Response:",
        "output": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)",
        "reference": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "372",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef heap_assending(nums):\n\t\"\"\"\n\tWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\tassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\t\"\"\"\n\n\n### Response:",
        "output": "import heapq as hq\ndef heap_assending(nums):\n  hq.heapify(nums)\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\n  return s_result",
        "reference": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "373",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef volume_cuboid(l,w,h):\n\t\"\"\"\n\tWrite a function to find the volume of a cuboid.\n\tassert volume_cuboid(1,2,3)==6\n\t\"\"\"\n\n\n### Response:",
        "output": "def volume_cuboid(l,w,h):\n  volume=l*w*h\n  return volume",
        "reference": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "374",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef permute_string(str):\n\t\"\"\"\n\tWrite a function to print all permutations of a given string including duplicates.\n\tassert permute_string('ab')==['ab', 'ba']\n\t\"\"\"\n\n\n### Response:",
        "output": "def permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list",
        "reference": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "375",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef round_num(n,m):\n\t\"\"\"\n\tWrite a function to round the given number to the nearest multiple of a specific number.\n\tassert round_num(4722,10)==4720\n\t\"\"\"\n\n\n### Response:",
        "output": "def round_num(n,m):\n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)",
        "reference": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "376",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_replica(test_tup):\n\t\"\"\"\n\tWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\tassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_replica(test_tup):\n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n                else 'MSP' for ele in test_tup)\n  return (res)",
        "reference": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "377",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_Char(s,c) :\n\t\"\"\"\n\tWrite a python function to remove all occurrences of a character in a given string.\n\tassert remove_Char(\"aba\",'a') == \"b\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_Char(s,c) :  \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s) ",
        "reference": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "378",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef move_first(test_list):\n\t\"\"\"\n\tWrite a python function to shift last element to first position in the given list.\n\tassert move_first([1,2,3,4]) == [4,1,2,3]\n\t\"\"\"\n\n\n### Response:",
        "output": "def move_first(test_list):\n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list",
        "reference": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "379",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef surfacearea_cuboid(l,w,h):\n\t\"\"\"\n\tWrite a function to find the surface area of a cuboid.\n\tassert surfacearea_cuboid(1,2,3)==22\n\t\"\"\"\n\n\n### Response:",
        "output": "def surfacearea_cuboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  return SA",
        "reference": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "380",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef multi_list(rownum,colnum):\n\t\"\"\"\n\tWrite a function to generate a two-dimensional array.\n\tassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\t\"\"\"\n\n\n### Response:",
        "output": "def multi_list(rownum,colnum):\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n    for col in range(colnum):\n        multi_list[row][col]= row*col\n  return multi_list\n",
        "reference": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "381",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef index_on_inner_list(list_data, index_no):\n\t\"\"\"\n\tWrite a function to sort a list of lists by a given index of the inner list.\n\tassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\t\"\"\"\n\n\n### Response:",
        "output": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result",
        "reference": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "382",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_rotation_count(A):\n\t\"\"\"\n\tWrite a function to find the number of rotations in a circularly sorted array.\n\tassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_rotation_count(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1",
        "reference": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "383",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef even_bit_toggle_number(n) :\n\t\"\"\"\n\tWrite a python function to toggle all odd bits of a given number.\n\tassert even_bit_toggle_number(10) == 15\n\t\"\"\"\n\n\n### Response:",
        "output": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ",
        "reference": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "384",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef frequency_Of_Smallest(n,arr):\n\t\"\"\"\n\tWrite a python function to find the frequency of the smallest value in a given array.\n\tassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def frequency_Of_Smallest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ",
        "reference": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "385",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_perrin(n):\n\t\"\"\"\n\tWrite a function to find the n'th perrin number using recursion.\n\tassert get_perrin(9) == 12\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_perrin(n):\n  if (n == 0):\n    return 3\n  if (n == 1):\n    return 0\n  if (n == 2):\n    return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "reference": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "386",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef swap_count(s):\n\t\"\"\"\n\tWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\tassert swap_count(\"[]][][\") == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def swap_count(s):\n    chars = s\n    count_left = 0\n    count_right = 0\n    swap = 0\n    imbalance = 0; \n    for i in range(len(chars)):\n        if chars[i] == '[':\n            count_left += 1\n            if imbalance > 0:\n                swap += imbalance\n                imbalance -= 1\n        elif chars[i] == ']':\n            count_right += 1\n            imbalance = (count_right - count_left) \n    return swap",
        "reference": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "387",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef even_or_odd(N):\n\t\"\"\"\n\tWrite a python function to check whether the hexadecimal number is even or odd.\n\tassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def even_or_odd(N): \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\") ",
        "reference": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "388",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef highest_Power_of_2(n):\n\t\"\"\"\n\tWrite a python function to find the highest power of 2 that is less than or equal to n.\n\tassert highest_Power_of_2(10) == 8\n\t\"\"\"\n\n\n### Response:",
        "output": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res; ",
        "reference": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "389",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_lucas(n):\n\t\"\"\"\n\tWrite a function to find the n'th lucas number.\n\tassert find_lucas(9) == 76\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_lucas(n): \n    if (n == 0): \n        return 2\n    if (n == 1): \n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2) ",
        "reference": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "390",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef add_string(list,string):\n\t\"\"\"\n\tWrite a function to insert a given string at the beginning of all items in a list.\n\tassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\t\"\"\"\n\n\n### Response:",
        "output": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n return add_string",
        "reference": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "391",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef convert_list_dictionary(l1, l2, l3):\n\t\"\"\"\n\tWrite a function to convert more than one list to nested dictionary.\n\tassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\t\"\"\"\n\n\n### Response:",
        "output": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
        "reference": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "392",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_max_sum (n):\n\t\"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\tassert get_max_sum(60) == 106\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_max_sum (n):\n    res = list()\n    res.append(0)\n    res.append(1)\n    i = 2\n    while i<n + 1:\n        res.append(max(i, (res[int(i / 2)] \n                        + res[int(i / 3)] +\n                            res[int(i / 4)]\n                        + res[int(i / 5)])))\n        i = i + 1\n    return res[n]",
        "reference": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "393",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_length_list(input_list):\n\t\"\"\"\n\tWrite a function to find the list with maximum length using lambda function.\n\tassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
        "reference": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "394",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_distinct(test_tup):\n\t\"\"\"\n\tWrite a function to check if given tuple is distinct or not.\n\tassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ",
        "reference": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "395",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef first_non_repeating_character(str1):\n\t\"\"\"\n\tWrite a python function to find the first non-repeated character in a given string.\n\tassert first_non_repeating_character(\"abcabc\") == None\n\t\"\"\"\n\n\n### Response:",
        "output": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
        "reference": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "396",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_char(string):\n\t\"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\tassert check_char(\"abba\") == \"Valid\"\n\t\"\"\"\n\n\n### Response:",
        "output": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    if(re.search(regex, string)): \n        return \"Valid\" \n    else: \n        return \"Invalid\" ",
        "reference": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "397",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef median_numbers(a,b,c):\n\t\"\"\"\n\tWrite a function to find the median of three specific numbers.\n\tassert median_numbers(25,55,65)==55.0\n\t\"\"\"\n\n\n### Response:",
        "output": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
        "reference": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "398",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_of_digits(nums):\n\t\"\"\"\n\tWrite a function to compute the sum of digits of each number of a given list.\n\tassert sum_of_digits([10,2,56])==14\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "reference": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "399",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef bitwise_xor(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\tassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\t\"\"\"\n\n\n### Response:",
        "output": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "reference": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "400",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef extract_freq(test_list):\n\t\"\"\"\n\tWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\tassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
        "reference": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "401",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef add_nested_tuples(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\tassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\t\"\"\"\n\n\n### Response:",
        "output": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "reference": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "402",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef ncr_modp(n, r, p):\n\t\"\"\"\n\tWrite a function to compute the value of ncr%p.\n\tassert ncr_modp(10,2,13)==6\n\t\"\"\"\n\n\n### Response:",
        "output": "def ncr_modp(n, r, p): \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ",
        "reference": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "403",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_valid_URL(str):\n\t\"\"\"\n\tWrite a function to check if a url is valid or not using regex.\n\tassert is_valid_URL(\"https://www.google.com\") == True\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef is_valid_URL(str):\n    regex = (\"((http|https)://)(www.)?\" +\n            \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n            \"{2,256}\\\\.[a-z]\" +\n            \"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n            \"._\\\\+~#?&//=]*)\")\n    p = re.compile(regex)\n    if (str == None):\n        return False\n    if(re.search(p, str)):\n        return True\n    else:\n        return False",
        "reference": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "404",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef minimum(a,b):\n\t\"\"\"\n\tWrite a python function to find the minimum of two numbers.\n\tassert minimum(1,2) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
        "reference": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "405",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_tuplex(tuplex,tuple1):\n\t\"\"\"\n\tWrite a function to check whether an element exists within a tuple.\n\tassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
        "reference": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "406",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Parity(x):\n\t\"\"\"\n\tWrite a python function to find the parity of a given number.\n\tassert find_Parity(12) == \"Even Parity\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return (\"Odd Parity\"); \n    return (\"Even Parity\"); ",
        "reference": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "407",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef rearrange_bigger(n):\n\t\"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n\tassert rearrange_bigger(12)==21\n\t\"\"\"\n\n\n### Response:",
        "output": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
        "reference": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "408",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef k_smallest_pairs(nums1, nums2, k):\n\t\"\"\"\n\tWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\tassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\t\"\"\"\n\n\n### Response:",
        "output": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
        "reference": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "409",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef min_product_tuple(list1):\n\t\"\"\"\n\tWrite a function to find the minimum product from the pairs of tuples within a given list.\n\tassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\t\"\"\"\n\n\n### Response:",
        "output": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
        "reference": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "410",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef min_val(listval):\n\t\"\"\"\n\tWrite a function to find the minimum value in a given heterogeneous list.\n\tassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\t\"\"\"\n\n\n### Response:",
        "output": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "reference": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "411",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef snake_to_camel(word):\n\t\"\"\"\n\tWrite a function to convert the given snake case string to camel case string by using regex.\n\tassert snake_to_camel('android_tv') == 'AndroidTv'\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "reference": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "412",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_odd(l):\n\t\"\"\"\n\tWrite a python function to remove odd numbers from a given list.\n\tassert remove_odd([1,2,3]) == [2]\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "reference": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "413",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef extract_nth_element(list1, n):\n\t\"\"\"\n\tWrite a function to extract the nth element from a given list of tuples.\n\tassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\t\"\"\"\n\n\n### Response:",
        "output": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "reference": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "414",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef overlapping(list1,list2):\n\t\"\"\"\n\tWrite a python function to check whether the value exists in a sequence or not.\n\tassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\t\"\"\"\n\n\n### Response:",
        "output": "def overlapping(list1,list2):  \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0",
        "reference": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "415",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_Product(arr):\n\t\"\"\"\n\tWrite a python function to find a pair with highest product from a given array of integers.\n\tassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
        "reference": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "416",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef breakSum(n):\n\t\"\"\"\n\tWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\tassert breakSum(12) == 13\n\t\"\"\"\n\n\n### Response:",
        "output": "MAX = 1000000\ndef breakSum(n): \n    dp = [0]*(n+1) \n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1): \n        dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n    return dp[n]",
        "reference": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "417",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef group_tuples(Input):\n\t\"\"\"\n\tWrite a function to find common first element in given list of tuple.\n\tassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\t\"\"\"\n\n\n### Response:",
        "output": "def group_tuples(Input): \n    out = {} \n    for elem in Input: \n        try: \n            out[elem[0]].extend(elem[1:]) \n        except KeyError: \n            out[elem[0]] = list(elem) \n    return [tuple(values) for values in out.values()] ",
        "reference": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "418",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef Find_Max(lst):\n\t\"\"\"\n\tWrite a python function to find the sublist having maximum length.\n\tassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\t\"\"\"\n\n\n### Response:",
        "output": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "reference": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "419",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef round_and_sum(list1):\n\t\"\"\"\n\tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\tassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\t\"\"\"\n\n\n### Response:",
        "output": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "reference": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "420",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef cube_Sum(n):\n\t\"\"\"\n\tWrite a python function to find the cube sum of first n even natural numbers.\n\tassert cube_Sum(2) == 72\n\t\"\"\"\n\n\n### Response:",
        "output": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "reference": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "421",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef concatenate_tuple(test_tup):\n\t\"\"\"\n\tWrite a function to concatenate each element of tuple by the delimiter.\n\tassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\t\"\"\"\n\n\n### Response:",
        "output": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
        "reference": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "422",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_Average_Of_Cube(n):\n\t\"\"\"\n\tWrite a python function to find the average of cubes of first n natural numbers.\n\tassert find_Average_Of_Cube(2) == 4.5\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
        "reference": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "423",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_maxgold(gold, m, n):\n\t\"\"\"\n\tWrite a function to solve gold mine problem.\n\tassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_maxgold(gold, m, n): \n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n            else: \n                right_up = goldTable[row-1][col+1] \n            if (row == m-1 or col == n-1): \n                right_down = 0\n            else: \n                right_down = goldTable[row+1][col+1] \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n    res = goldTable[0][0] \n    for i in range(1, m): \n        res = max(res, goldTable[i][0])  \n    return res ",
        "reference": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "424",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef extract_rear(test_tuple):\n\t\"\"\"\n\tWrite a function to extract only the rear index element of each string in the given tuple.\n\tassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\t\"\"\"\n\n\n### Response:",
        "output": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
        "reference": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "425",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_element_in_list(list1, x):\n\t\"\"\"\n\tWrite a function to count the number of sublists containing a particular element.\n\tassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "reference": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "426",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef filter_oddnumbers(nums):\n\t\"\"\"\n\tWrite a function to filter odd numbers using lambda function.\n\tassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\t\"\"\"\n\n\n### Response:",
        "output": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "reference": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "427",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef change_date_format(dt):\n\t\"\"\"\n\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\tassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "reference": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "428",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef shell_sort(my_list):\n\t\"\"\"\n\tWrite a function to sort the given array by using shell sort.\n\tassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\t\"\"\"\n\n\n### Response:",
        "output": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "reference": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "429",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef and_tuples(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n\tassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\t\"\"\"\n\n\n### Response:",
        "output": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "reference": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "430",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef parabola_directrix(a, b, c):\n\t\"\"\"\n\tWrite a function to find the directrix of a parabola.\n\tassert parabola_directrix(5,3,2)==-198\n\t\"\"\"\n\n\n### Response:",
        "output": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "reference": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "431",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef common_element(list1, list2):\n\t\"\"\"\n\tWrite a function that takes two lists and returns true if they have at least one common element.\n\tassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "reference": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "432",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef median_trapezium(base1,base2,height):\n\t\"\"\"\n\tWrite a function to find the median of a trapezium.\n\tassert median_trapezium(15,25,35)==20\n\t\"\"\"\n\n\n### Response:",
        "output": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "reference": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "433",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_greater(arr, number):\n\t\"\"\"\n\tWrite a function to check whether the entered number is greater than the elements of the given array.\n\tassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_greater(arr, number):\n  arr.sort()\n  if number > arr[-1]:\n    return ('Yes, the entered number is greater than those in the array')\n  else:\n    return ('No, entered number is less than those in the array')",
        "reference": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "434",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef text_match_one(text):\n\t\"\"\"\n\tWrite a function that matches a string that has an a followed by one or more b's.\n\tassert text_match_one(\"ac\")==('Not matched!')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n",
        "reference": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "435",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef last_Digit(n) :\n\t\"\"\"\n\tWrite a python function to find the last digit of a given number.\n\tassert last_Digit(123) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "def last_Digit(n) :\n    return (n % 10) ",
        "reference": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "436",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef neg_nos(list1):\n\t\"\"\"\n\tWrite a python function to print negative numbers in a list.\n\tassert neg_nos([-1,4,5,-6]) == -1,-6\n\t\"\"\"\n\n\n### Response:",
        "output": "def neg_nos(list1):\n  for num in list1: \n    if num < 0: \n       return num ",
        "reference": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "437",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_odd(str1):\n\t\"\"\"\n\tWrite a function to remove odd characters in a string.\n\tassert remove_odd(\"python\")==(\"yhn\")\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "reference": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "438",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_bidirectional(test_list):\n\t\"\"\"\n\tWrite a function to count bidirectional tuple pairs.\n\tassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\t\"\"\"\n\n\n### Response:",
        "output": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return (str(res)) ",
        "reference": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "439",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef multiple_to_single(L):\n\t\"\"\"\n\tWrite a function to convert a list of multiple integers into a single integer.\n\tassert multiple_to_single([11, 33, 50])==113350\n\t\"\"\"\n\n\n### Response:",
        "output": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "reference": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "440",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_adverb_position(text):\n\t\"\"\"\n\tWrite a function to find all adverbs and their positions in a given sentence.\n\tassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "reference": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "441",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef surfacearea_cube(l):\n\t\"\"\"\n\tWrite a function to find the surface area of a cube.\n\tassert surfacearea_cube(5)==150\n\t\"\"\"\n\n\n### Response:",
        "output": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "reference": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "442",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef positive_count(nums):\n\t\"\"\"\n\tWrite a function to find the ration of positive numbers in an array of integers.\n\tassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\t\"\"\"\n\n\n### Response:",
        "output": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "reference": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "443",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef largest_neg(list1):\n\t\"\"\"\n\tWrite a python function to find the largest negative number from the given list.\n\tassert largest_neg([1,2,3,-4,-6]) == -6\n\t\"\"\"\n\n\n### Response:",
        "output": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "reference": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "444",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef trim_tuple(test_list, K):\n\t\"\"\"\n\tWrite a function to trim each tuple by k in the given tuple list.\n\tassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\t\"\"\"\n\n\n### Response:",
        "output": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
        "reference": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "445",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef index_multiplication(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\tassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\t\"\"\"\n\n\n### Response:",
        "output": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "reference": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "446",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef count_Occurrence(tup, lst):\n\t\"\"\"\n\tWrite a python function to count the occurence of all elements of list in a tuple.\n\tassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
        "reference": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "447",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef cube_nums(nums):\n\t\"\"\"\n\tWrite a function to find cubes of individual elements in a list using lambda function.\n\tassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\t\"\"\"\n\n\n### Response:",
        "output": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "reference": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "448",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef cal_sum(n):\n\t\"\"\"\n\tWrite a function to calculate the sum of perrin numbers.\n\tassert cal_sum(9) == 49\n\t\"\"\"\n\n\n### Response:",
        "output": "def cal_sum(n): \n    a = 3\n    b = 0\n    c = 2\n    if (n == 0): \n        return 3\n    if (n == 1): \n        return 3\n    if (n == 2): \n        return 5\n    sum = 5\n    while (n > 2): \n        d = a + b \n        sum = sum + d \n        a = b \n        b = c \n        c = d \n        n = n-1\n    return sum",
        "reference": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "449",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n\t\"\"\"\n\tWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\tassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_Triangle(x1,y1,x2,y2,x3,y3): \n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n        return ('No') \n    else: \n        return ('Yes') ",
        "reference": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "450",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef extract_string(str, l):\n\t\"\"\"\n\tWrite a function to extract specified size of strings from a give list of string values.\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\t\"\"\"\n\n\n### Response:",
        "output": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "reference": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "451",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_whitespaces(text1):\n\t\"\"\"\n\tWrite a function to remove all whitespaces from the given string using regex.\n\tassert remove_whitespaces(' Google\tFlutter ') == 'GoogleFlutter'\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "reference": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "452",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef loss_amount(actual_cost,sale_amount):\n\t\"\"\"\n\tWrite a function that gives loss amount if the given amount has loss else return none.\n\tassert loss_amount(1500,1200)==None\n\t\"\"\"\n\n\n### Response:",
        "output": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None",
        "reference": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "453",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sumofFactors(n) :\n\t\"\"\"\n\tWrite a python function to find the sum of even factors of a number.\n\tassert sumofFactors(18) == 26\n\t\"\"\"\n\n\n### Response:",
        "output": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res ",
        "reference": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "454",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef text_match_wordz(text):\n\t\"\"\"\n\tWrite a function that matches a word containing 'z'.\n\tassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "reference": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "455",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_monthnumb_number(monthnum2):\n\t\"\"\"\n\tWrite a function to check whether the given month number contains 31 days or not.\n\tassert check_monthnumb_number(5)==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "reference": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "456",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef reverse_string_list(stringlist):\n\t\"\"\"\n\tWrite a function to reverse strings in a given list of string values.\n\tassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\t\"\"\"\n\n\n### Response:",
        "output": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "reference": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "457",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef Find_Min(lst):\n\t\"\"\"\n\tWrite a python function to find the sublist having minimum length.\n\tassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\t\"\"\"\n\n\n### Response:",
        "output": "def Find_Min(lst): \n    minList = min((x) for x in lst) \n    return minList",
        "reference": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "458",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef rectangle_area(l,b):\n\t\"\"\"\n\tWrite a function to find the area of a rectangle.\n\tassert rectangle_area(10,20)==200\n\t\"\"\"\n\n\n### Response:",
        "output": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "reference": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "459",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_uppercase(str1):\n\t\"\"\"\n\tWrite a function to remove uppercase substrings from a given string by using regex.\n\tassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef remove_uppercase(str1):\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  result =  remove_upper(str1)\n  return (result)",
        "reference": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "460",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef Extract(lst):\n\t\"\"\"\n\tWrite a python function to get the first element of each sublist.\n\tassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\t\"\"\"\n\n\n### Response:",
        "output": "def Extract(lst): \n    return [item[0] for item in lst] ",
        "reference": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "461",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef upper_ctr(str):\n\t\"\"\"\n\tWrite a python function to count the upper case characters in a given string.\n\tassert upper_ctr('PYthon') == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "reference": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "462",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef combinations_list(list1):\n\t\"\"\"\n\tWrite a function to find all possible combinations of the elements of a given list.\n\tassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\t\"\"\"\n\n\n### Response:",
        "output": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "reference": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "463",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_subarray_product(arr):\n\t\"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\tassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_subarray_product(arr):\n    n = len(arr)\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 0\n    flag = 0\n    for i in range(0, n):\n        if arr[i] > 0:\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min (min_ending_here * arr[i], 1)\n            flag = 1\n        elif arr[i] == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max (min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    if flag == 0 and max_so_far == 0:\n        return 0\n    return max_so_far",
        "reference": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "464",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_value(dict, n):\n\t\"\"\"\n\tWrite a function to check if all values are same in a dictionary.\n\tassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "reference": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "465",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef drop_empty(dict1):\n\t\"\"\"\n\tWrite a function to drop empty items from a given dictionary.\n\tassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\t\"\"\"\n\n\n### Response:",
        "output": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "reference": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "466",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_peak_util(arr, low, high, n):\n\t\"\"\"\n\tWrite a function to find the peak element in the given array.\n\tassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_peak_util(arr, low, high, n): \n    mid = low + (high - low)/2\n    mid = int(mid) \n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n        (mid == n - 1 or arr[mid + 1] <= arr[mid])): \n        return mid \n    elif (mid > 0 and arr[mid - 1] > arr[mid]): \n        return find_peak_util(arr, low, (mid - 1), n) \n    else: \n        return find_peak_util(arr, (mid + 1), high, n) \ndef find_peak(arr, n): \n    return find_peak_util(arr, 0, n - 1, n) ",
        "reference": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "467",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef decimal_to_Octal(deciNum):\n\t\"\"\"\n\tWrite a python function to convert decimal number to octal number.\n\tassert decimal_to_Octal(10) == 12\n\t\"\"\"\n\n\n### Response:",
        "output": "def decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n        remainder= deciNum % 8;\n        octalNum+= remainder*countval;\n        countval= countval*10;\n        deciNum //= 8; \n    return (octalNum)",
        "reference": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "468",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_product(arr, n ):\n\t\"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\tassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\t\"\"\"\n\n\n### Response:",
        "output": "def max_product(arr, n ): \n    mpis =[0] * (n) \n    for i in range(n): \n        mpis[i] = arr[i] \n    for i in range(1, n): \n        for j in range(i): \n            if (arr[i] > arr[j] and\n                    mpis[i] < (mpis[j] * arr[i])): \n                        mpis[i] = mpis[j] * arr[i] \n    return max(mpis)",
        "reference": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "469",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef max_profit(price, k):\n\t\"\"\"\n\tWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\tassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\t\"\"\"\n\n\n### Response:",
        "output": "def max_profit(price, k):\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]",
        "reference": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "470",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef add_pairwise(test_tup):\n\t\"\"\"\n\tWrite a function to find the pairwise addition of the elements of the given tuples.\n\tassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\t\"\"\"\n\n\n### Response:",
        "output": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "reference": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "471",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find_remainder(arr, lens, n):\n\t\"\"\"\n\tWrite a python function to find remainder of array multiplication divided by n.\n\tassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\t\"\"\"\n\n\n### Response:",
        "output": "def find_remainder(arr, lens, n): \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
        "reference": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "472",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef check_Consecutive(l):\n\t\"\"\"\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\tassert check_Consecutive([1,2,3,4,5]) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "reference": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "473",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef tuple_intersection(test_list1, test_list2):\n\t\"\"\"\n\tWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\tassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\t\"\"\"\n\n\n### Response:",
        "output": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "reference": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "474",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef replace_char(str1,ch,newch):\n\t\"\"\"\n\tWrite a function to replace characters in a string.\n\tassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\t\"\"\"\n\n\n### Response:",
        "output": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "reference": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "475",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sort_counter(dict1):\n\t\"\"\"\n\tWrite a function to sort counter by value.\n\tassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\t\"\"\"\n\n\n### Response:",
        "output": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "reference": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "476",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef big_sum(nums):\n\t\"\"\"\n\tWrite a python function to find the sum of the largest and smallest value in a given array.\n\tassert big_sum([1,2,3]) == 4\n\t\"\"\"\n\n\n### Response:",
        "output": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "reference": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "477",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_lower(string):\n\t\"\"\"\n\tWrite a python function to convert the given string to lower case.\n\tassert is_lower(\"InValid\") == \"invalid\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_lower(string):\n  return (string.lower())",
        "reference": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "478",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_lowercase(str1):\n\t\"\"\"\n\tWrite a function to remove lowercase substrings from a given string.\n\tassert remove_lowercase(\"PYTHon\")==('PYTH')\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef remove_lowercase(str1):\n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result",
        "reference": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "479",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef first_Digit(n) :\n\t\"\"\"\n\tWrite a python function to find the first digit of a given number.\n\tassert first_Digit(123) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10; \n    return int(n) ",
        "reference": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "480",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef get_max_occuring_char(str1):\n\t\"\"\"\n\tWrite a python function to find the maximum occurring character in a given string.\n\tassert get_max_occuring_char(\"data\") == \"a\"\n\t\"\"\"\n\n\n### Response:",
        "output": "def get_max_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch",
        "reference": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "481",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef is_subset_sum(set, n, sum):\n\t\"\"\"\n\tWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\tassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_subset_sum(set, n, sum):\n    if (sum == 0):\n        return True\n    if (n == 0):\n        return False\n    if (set[n - 1] > sum):\n        return is_subset_sum(set, n - 1, sum)\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "reference": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "482",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef match(text):\n\t\"\"\"\n\tWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\tassert match(\"Geeks\") == 'Yes'\n\t\"\"\"\n\n\n### Response:",
        "output": "import re \ndef match(text): \n        pattern = '[A-Z]+[a-z]+$'\n        if re.search(pattern, text): \n                return('Yes') \n        else: \n                return('No') ",
        "reference": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "483",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef first_Factorial_Divisible_Number(x):\n\t\"\"\"\n\tWrite a python function to find the first natural number whose factorial is divisible by x.\n\tassert first_Factorial_Divisible_Number(10) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "def first_Factorial_Divisible_Number(x): \n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n        fact = fact * i \n        if (fact % x == 0): \n            break\n    return i ",
        "reference": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "484",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_matching_tuple(test_list1, test_list2):\n\t\"\"\"\n\tWrite a function to remove the matching tuples from the given two tuples.\n\tassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ",
        "reference": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "485",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef largest_palindrome(A, n) :\n\t\"\"\"\n\tWrite a function to find the largest palindromic number in the given array.\n\tassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\t\"\"\"\n\n\n### Response:",
        "output": "def is_palindrome(n) : \n    divisor = 1\n    while (n / divisor >= 10) : \n        divisor *= 10\n    while (n != 0) : \n        leading = n // divisor \n        trailing = n % 10\n        if (leading != trailing) : \n            return False\n        n = (n % divisor) // 10\n        divisor = divisor // 100\n    return True\ndef largest_palindrome(A, n) : \n    A.sort() \n    for i in range(n - 1, -1, -1) : \n        if (is_palindrome(A[i])) : \n            return A[i] \n    return -1",
        "reference": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "486",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef binomial_probability(n, k, p):\n\t\"\"\"\n\tWrite a function to compute binomial probability for the given number.\n\tassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\t\"\"\"\n\n\n### Response:",
        "output": "def nCr(n, r): \n    if (r > n / 2): \n        r = n - r \n    answer = 1 \n    for i in range(1, r + 1): \n        answer *= (n - r + i) \n        answer /= i \n    return answer \ndef binomial_probability(n, k, p): \n    return (nCr(n, k) * pow(p, k) *    pow(1 - p, n - k)) ",
        "reference": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "487",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sort_tuple(tup):\n\t\"\"\"\n\tWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\tassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\t\"\"\"\n\n\n### Response:",
        "output": "def sort_tuple(tup): \n    lst = len(tup) \n    for i in range(0, lst): \n        for j in range(0, lst-i-1): \n            if (tup[j][-1] > tup[j + 1][-1]): \n                temp = tup[j] \n                tup[j]= tup[j + 1] \n                tup[j + 1]= temp \n    return tup",
        "reference": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "488",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef area_pentagon(a):\n\t\"\"\"\n\tWrite a function to find the area of a pentagon.\n\tassert area_pentagon(5)==43.01193501472417\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area",
        "reference": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "489",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef frequency_Of_Largest(n,arr):\n\t\"\"\"\n\tWrite a python function to find the frequency of the largest value in a given array.\n\tassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def frequency_Of_Largest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ",
        "reference": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "490",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef extract_symmetric(test_list):\n\t\"\"\"\n\tWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\tassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\t\"\"\"\n\n\n### Response:",
        "output": "def extract_symmetric(test_list):\n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  res = {(a, b) for a, b in temp if a < b}\n  return (res) ",
        "reference": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "491",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_gp(a,n,r):\n\t\"\"\"\n\tWrite a function to find the sum of geometric progression series.\n\tassert sum_gp(1,5,2)==31\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef sum_gp(a,n,r):\n total = (a * (1 - math.pow(r, n ))) / (1- r)\n return total",
        "reference": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "492",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef binary_search(item_list,item):\n\t\"\"\"\n\tWrite a function to search an element in the given array by using binary search.\n\tassert binary_search([1,2,3,5,8], 6) == False\n\t\"\"\"\n\n\n### Response:",
        "output": "def binary_search(item_list,item):\n    first = 0\n    last = len(item_list)-1\n    found = False\n    while( first<=last and not found):\n        mid = (first + last)//2\n        if item_list[mid] == item :\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1    \n    return found",
        "reference": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "493",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t\"\"\"\n\tWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\tassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons",
        "reference": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "494",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef binary_to_integer(test_tup):\n\t\"\"\"\n\tWrite a function to convert the given binary tuple to integer.\n\tassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\t\"\"\"\n\n\n### Response:",
        "output": "def binary_to_integer(test_tup):\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  return (str(res)) ",
        "reference": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "495",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_lowercase(str1):\n\t\"\"\"\n\tWrite a function to remove lowercase substrings from a given string by using regex.\n\tassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\t\"\"\"\n\n\n### Response:",
        "output": "import re\ndef remove_lowercase(str1):\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  result =  remove_lower(str1)\n  return (result)",
        "reference": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "496",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef heap_queue_smallest(nums,n):\n\t\"\"\"\n\tWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\tassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\t\"\"\"\n\n\n### Response:",
        "output": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums",
        "reference": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "497",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef surfacearea_cone(r,h):\n\t\"\"\"\n\tWrite a function to find the surface area of a cone.\n\tassert surfacearea_cone(5,12)==282.7433388230814\n\t\"\"\"\n\n\n### Response:",
        "output": "import math\ndef surfacearea_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  SA = math.pi * r * (r + l)\n  return SA",
        "reference": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "498",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef gcd(x, y):\n\t\"\"\"\n\tWrite a python function to find gcd of two positive integers.\n\tassert gcd(12, 17) == 1\n\t\"\"\"\n\n\n### Response:",
        "output": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd",
        "reference": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "499",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef diameter_circle(r):\n\t\"\"\"\n\tWrite a function to find the diameter of a circle.\n\tassert diameter_circle(10)==20\n\t\"\"\"\n\n\n### Response:",
        "output": "def diameter_circle(r):\n  diameter=2*r\n  return diameter",
        "reference": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "500",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef concatenate_elements(list):\n\t\"\"\"\n\tWrite a function to concatenate all elements of the given list into a string.\n\tassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\t\"\"\"\n\n\n### Response:",
        "output": "def concatenate_elements(list):\n  ans = ' '\n  for i in list:\n    ans = ans+ ' '+i\n  return (ans) ",
        "reference": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "501",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef num_comm_div(x,y):\n\t\"\"\"\n\tWrite a python function to find common divisor between two numbers in a given pair.\n\tassert num_comm_div(2,4) == 2\n\t\"\"\"\n\n\n### Response:",
        "output": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result",
        "reference": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "502",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef find(n,m):\n\t\"\"\"\n\tWrite a python function to find remainder of two numbers.\n\tassert find(3,3) == 0\n\t\"\"\"\n\n\n### Response:",
        "output": "def find(n,m):\n  r = n%m\n  return (r)",
        "reference": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "503",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef add_consecutive_nums(nums):\n\t\"\"\"\n\tWrite a function to add consecutive numbers of a given list.\n\tassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\t\"\"\"\n\n\n### Response:",
        "output": "def add_consecutive_nums(nums):\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result",
        "reference": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "504",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef sum_Of_Series(n):\n\t\"\"\"\n\tWrite a python function to find the cube sum of first n natural numbers.\n\tassert sum_Of_Series(5) == 225\n\t\"\"\"\n\n\n### Response:",
        "output": "def sum_Of_Series(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += i * i*i       \n    return sum",
        "reference": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "505",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef re_order(A):\n\t\"\"\"\n\tWrite a function to move all zeroes to the end of the given array.\n\tassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\t\"\"\"\n\n\n### Response:",
        "output": "def re_order(A):\n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            k = k + 1\n    for i in range(k, len(A)):\n        A[i] = 0\n    return A",
        "reference": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "506",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef permutation_coefficient(n, k):\n\t\"\"\"\n\tWrite a function to calculate the permutation coefficient of given p(n, k).\n\tassert permutation_coefficient(10, 2) == 90\n\t\"\"\"\n\n\n### Response:",
        "output": "def permutation_coefficient(n, k): \n    P = [[0 for i in range(k + 1)] \n            for j in range(n + 1)] \n    for i in range(n + 1): \n        for j in range(min(i, k) + 1): \n            if (j == 0): \n                P[i][j] = 1\n            else: \n                P[i][j] = P[i - 1][j] + ( \n                        j * P[i - 1][j - 1]) \n            if (j < k): \n                P[i][j + 1] = 0\n    return P[n][k] ",
        "reference": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "507",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef remove_words(list1, removewords):\n\t\"\"\"\n\tWrite a function to remove specific words from a given list.\n\tassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\t\"\"\"\n\n\n### Response:",
        "output": "def remove_words(list1, removewords):\n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n    return list1  ",
        "reference": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "508",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef same_order(l1, l2):\n\t\"\"\"\n\tWrite a function to check if the common elements between two given lists are in the same order or not.\n\tassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\t\"\"\"\n\n\n### Response:",
        "output": "def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2",
        "reference": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "509",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef average_Odd(n) :\n\t\"\"\"\n\tWrite a python function to find the average of odd numbers till a given odd number.\n\tassert average_Odd(9) == 5\n\t\"\"\"\n\n\n### Response:",
        "output": "def average_Odd(n) : \n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=count+1\n        sm = sm + n \n        n = n-2\n    return sm//count ",
        "reference": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    },
    {
        "entry_point": "510",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\ndef no_of_subsequences(arr, k):\n\t\"\"\"\n\tWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\tassert no_of_subsequences([1,2,3,4], 10) == 11\n\t\"\"\"\n\n\n### Response:",
        "output": "def no_of_subsequences(arr, k): \n    n = len(arr) \n    dp = [[0 for i in range(n + 1)] \n            for j in range(k + 1)] \n    for i in range(1, k + 1): \n        for j in range(1, n + 1): \n            dp[i][j] = dp[i][j - 1] \n            if arr[j - 1] <= i and arr[j - 1] > 0: \n                dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n    return dp[k][n]",
        "reference": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "example": [],
        "language": "Python",
        "stop_tokens": []
    }
]